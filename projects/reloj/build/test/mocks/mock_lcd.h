/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_LCD_H
#define _MOCK_LCD_H

#include "unity.h"
#include "lcd.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_lcd_Init(void);
void mock_lcd_Destroy(void);
void mock_lcd_Verify(void);




#define lcdEscribirDatos_Ignore() lcdEscribirDatos_CMockIgnore()
void lcdEscribirDatos_CMockIgnore(void);
#define lcdEscribirDatos_StopIgnore() lcdEscribirDatos_CMockStopIgnore()
void lcdEscribirDatos_CMockStopIgnore(void);
#define lcdEscribirDatos_Expect(command, data) lcdEscribirDatos_CMockExpect(__LINE__, command, data)
void lcdEscribirDatos_CMockExpect(UNITY_LINE_TYPE cmock_line, lcd_registro_t command, uint8_t data);
typedef void (* CMOCK_lcdEscribirDatos_CALLBACK)(lcd_registro_t command, uint8_t data, int cmock_num_calls);
void lcdEscribirDatos_AddCallback(CMOCK_lcdEscribirDatos_CALLBACK Callback);
void lcdEscribirDatos_Stub(CMOCK_lcdEscribirDatos_CALLBACK Callback);
#define lcdEscribirDatos_StubWithCallback lcdEscribirDatos_Stub
#define lcdInicializar_Ignore() lcdInicializar_CMockIgnore()
void lcdInicializar_CMockIgnore(void);
#define lcdInicializar_StopIgnore() lcdInicializar_CMockStopIgnore()
void lcdInicializar_CMockStopIgnore(void);
#define lcdInicializar_Expect() lcdInicializar_CMockExpect(__LINE__)
void lcdInicializar_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_lcdInicializar_CALLBACK)(int cmock_num_calls);
void lcdInicializar_AddCallback(CMOCK_lcdInicializar_CALLBACK Callback);
void lcdInicializar_Stub(CMOCK_lcdInicializar_CALLBACK Callback);
#define lcdInicializar_StubWithCallback lcdInicializar_Stub
#define lcdCursor_Ignore() lcdCursor_CMockIgnore()
void lcdCursor_CMockIgnore(void);
#define lcdCursor_StopIgnore() lcdCursor_CMockStopIgnore()
void lcdCursor_CMockStopIgnore(void);
#define lcdCursor_Expect(row, col) lcdCursor_CMockExpect(__LINE__, row, col)
void lcdCursor_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t row, uint8_t col);
typedef void (* CMOCK_lcdCursor_CALLBACK)(uint8_t row, uint8_t col, int cmock_num_calls);
void lcdCursor_AddCallback(CMOCK_lcdCursor_CALLBACK Callback);
void lcdCursor_Stub(CMOCK_lcdCursor_CALLBACK Callback);
#define lcdCursor_StubWithCallback lcdCursor_Stub
#define lcdBorrar_Ignore() lcdBorrar_CMockIgnore()
void lcdBorrar_CMockIgnore(void);
#define lcdBorrar_StopIgnore() lcdBorrar_CMockStopIgnore()
void lcdBorrar_CMockStopIgnore(void);
#define lcdBorrar_Expect() lcdBorrar_CMockExpect(__LINE__)
void lcdBorrar_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_lcdBorrar_CALLBACK)(int cmock_num_calls);
void lcdBorrar_AddCallback(CMOCK_lcdBorrar_CALLBACK Callback);
void lcdBorrar_Stub(CMOCK_lcdBorrar_CALLBACK Callback);
#define lcdBorrar_StubWithCallback lcdBorrar_Stub
#define lcdEscribirCadena_Ignore() lcdEscribirCadena_CMockIgnore()
void lcdEscribirCadena_CMockIgnore(void);
#define lcdEscribirCadena_StopIgnore() lcdEscribirCadena_CMockStopIgnore()
void lcdEscribirCadena_CMockStopIgnore(void);
#define lcdEscribirCadena_Expect(text) lcdEscribirCadena_CMockExpect(__LINE__, text)
void lcdEscribirCadena_CMockExpect(UNITY_LINE_TYPE cmock_line, const char* text);
typedef void (* CMOCK_lcdEscribirCadena_CALLBACK)(const char* text, int cmock_num_calls);
void lcdEscribirCadena_AddCallback(CMOCK_lcdEscribirCadena_CALLBACK Callback);
void lcdEscribirCadena_Stub(CMOCK_lcdEscribirCadena_CALLBACK Callback);
#define lcdEscribirCadena_StubWithCallback lcdEscribirCadena_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
