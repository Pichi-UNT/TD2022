
projects/ejemplo/out/ejemplo.elf:     file format elf32-littlearm
projects/ejemplo/out/ejemplo.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0004d9

Program Header:
0x70000001 off    0x00011734 vaddr 0x1a001734 paddr 0x1a001734 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010038 vaddr 0x10000038 paddr 0x10000038 align 2**16
         filesz 0x00000000 memsz 0x00000010 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000173c memsz 0x0000173c flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00173c align 2**16
         filesz 0x00000038 memsz 0x00000038 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001730  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  10000000  1a00173c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020038  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020038  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020038  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020038  2**2
                  CONTENTS
  6 .bss          00000010  10000038  10000038  00010038  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020038  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020038  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020038  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020038  2**2
                  CONTENTS
 11 .init_array   00000004  1a001730  1a001730  00011730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a001734  1a001734  00011734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020038  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020038  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020038  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020038  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020038  2**2
                  CONTENTS
 18 .noinit       00000000  10000048  10000048  00020038  2**2
                  CONTENTS
 19 .debug_info   0000cb56  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 0000217f  00000000  00000000  0002cb8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00005a30  00000000  00000000  0002ed0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000760  00000000  00000000  0003473d  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 000006f8  00000000  00000000  00034e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  000086a1  00000000  00000000  00035595  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00006ee5  00000000  00000000  0003dc36  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0001d46a  00000000  00000000  00044b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000006e  00000000  00000000  00061f85  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000039  00000000  00000000  00061ff3  2**0
                  CONTENTS, READONLY
 29 .debug_frame  0000124c  00000000  00000000  0006202c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000038 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a001730 l    d  .init_array	00000000 .init_array
1a001734 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000048 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 ejemplo.c
10000038 l     O .bss	00000004 contador.9403
00000000 l    df *ABS*	00000000 board.c
1a000568 l     F .text	00000040 Board_LED_Init
1a0005a8 l     F .text	0000003c Board_TEC_Init
1a0005e4 l     F .text	0000003c Board_GPIO_Init
1a000620 l     F .text	00000030 Board_ADC_Init
1a000650 l     F .text	00000038 Board_SPI_Init
1a000688 l     F .text	00000024 Board_I2C_Init
1a0015b8 l     O .text	00000012 GpioPorts
1a0015d4 l     O .text	00000008 GpioButtons
1a0015dc l     O .text	0000000c GpioLeds
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0015e8 l     O .text	00000004 InitClkStates
1a0015ec l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0007b0 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0007c4 l     F .text	00000030 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000888 l     F .text	000000ac pll_calc_divs
1a000934 l     F .text	00000104 pll_get_frac
1a000a38 l     F .text	0000004c Chip_Clock_FindBaseClock
1a000cac l     F .text	00000022 Chip_Clock_GetDivRate
1000003c l     O .bss	00000008 audio_usb_pll_freq
1a00166c l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a000e98 l     F .text	00000014 Chip_SSP_GetClockIndex
1a000eac l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0016d8 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0010a0 l     F .text	0000002c Chip_UART_GetIndex
1a001720 l     O .text	00000008 UART_BClock
1a001728 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a001734 l       .init_array	00000000 __init_array_end
1a001730 l       .bss_RAM5	00000000 __preinit_array_end
00000000 l       *UND*	00000000 Chip_GPIO_ReadPort
1a001730 l       .init_array	00000000 __init_array_start
1a001730 l       .bss_RAM5	00000000 __preinit_array_start
1a000ad0 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0001cc  w    F .text	00000002 TIMER2_IRQHandler
1a000190  w    F .text	00000002 DebugMon_Handler
1a0001cc  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001cc  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001cc  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001cc  w    F .text	00000002 I2C0_IRQHandler
1a0006fc g     F .text	00000008 __stdio_init
1a00017c  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000868 g     F .text	0000000c Chip_ADC_SetResolution
1a0003e0 g     F .text	00000024 SysTick_Handler
1a0004d4  w    F .text	00000002 initialise_monitor_handles
1a0001cc  w    F .text	00000002 SDIO_IRQHandler
1a0001cc  w    F .text	00000002 ATIMER_IRQHandler
1a000194  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a00173c g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001cc  w    F .text	00000002 I2C1_IRQHandler
1a0001cc  w    F .text	00000002 UART1_IRQHandler
1a0001cc  w    F .text	00000002 GPIO5_IRQHandler
1a0001cc  w    F .text	00000002 CAN1_IRQHandler
53ff73a2 g       *ABS*	00000000 __valid_user_code_checksum
1a00173c g       .ARM.exidx	00000000 _etext
1a0001cc  w    F .text	00000002 USB1_IRQHandler
1a0001cc  w    F .text	00000002 I2S0_IRQHandler
1a0001cc  w    F .text	00000002 TIMER3_IRQHandler
1a000d50 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001cc  w    F .text	00000002 UART0_IRQHandler
1a0001b8 g     F .text	00000012 bss_init
1a0001cc  w    F .text	00000002 SGPIO_IRQHandler
1a001244 g     F .text	00000000 .hidden __aeabi_uldivmod
10000048 g       .noinit	00000000 _noinit
10000044 g     O .bss	00000004 SystemCoreClock
1a0010cc g     F .text	00000054 Chip_UART_Init
1a0001cc  w    F .text	00000002 ADC0_IRQHandler
1a000188  w    F .text	00000002 UsageFault_Handler
1a000dcc g     F .text	0000004c Chip_Clock_GetRate
1a0001cc  w    F .text	00000002 GPIO6_IRQHandler
1a000738 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001274 g     F .text	000002e2 .hidden __udivmoddi4
1a0015d0 g     O .text	00000004 ExtRateIn
1a0001cc  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0001cc  w    F .text	00000002 GPIO1_IRQHandler
1a0001cc  w    F .text	00000002 SSP0_IRQHandler
1a001734 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a00155c g     F .text	0000004c __libc_init_array
1a0001cc  w    F .text	00000002 ADC1_IRQHandler
1a0006d0 g     F .text	0000002c Board_Init
1a000564  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0001cc  w    F .text	00000002 RTC_IRQHandler
10000048 g       .bss	00000000 _ebss
1a0001cc  w    F .text	00000002 TIMER0_IRQHandler
1a0004d8 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001cc  w    F .text	00000002 SPI_IRQHandler
1a000e60 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001cc  w    F .text	00000002 LCD_IRQHandler
1a000a84 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00019c g     F .text	0000001a data_init
1a0001cc  w    F .text	00000002 TIMER1_IRQHandler
1a000e3c g     F .text	00000024 Chip_I2C_Init
1a0001cc  w    F .text	00000002 UART2_IRQHandler
1a000c40 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a000300 g     F .text	00000094 ConfigurarPuertos
1a000ec4 g     F .text	00000012 Chip_SSP_SetClockRate
1a0001cc  w    F .text	00000002 GPIO2_IRQHandler
1a000d28 g     F .text	00000026 Chip_Clock_GetBaseClock
10000038 g       .bss	00000000 _bss
1a000834 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0001cc  w    F .text	00000002 I2S1_IRQHandler
1a000ed8 g     F .text	0000003e Chip_SSP_SetBitRate
1a000e18 g     F .text	00000002 Chip_GPIO_Init
1a0015cc g     O .text	00000004 OscRateIn
10000048 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001cc  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a001558  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0001cc  w    F .text	00000002 USB0_IRQHandler
1a0001cc  w    F .text	00000002 GPIO3_IRQHandler
1a0001cc  w    F .text	00000002 SCT_IRQHandler
1a000394 g     F .text	0000004c ConfigurarInterrupcion
1a000aec g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0015a8 g     F .text	00000010 memset
1a000180  w    F .text	00000002 MemManage_Handler
1a000404 g     F .text	000000d0 main
1a0001cc  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a00018c  w    F .text	00000002 SVC_Handler
1a0001cc  w    F .text	00000002 GPIO7_IRQHandler
1a000d5c g     F .text	0000003c Chip_Clock_EnableOpts
1a000b08 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000bc0 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001204 g     F .text	00000040 SystemInit
1a0001cc  w    F .text	00000002 SPIFI_IRQHandler
1a0001cc  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a000560  w    F .text	00000002 _fini
1a0007f4 g     F .text	00000040 Chip_ADC_Init
1a000704 g     F .text	00000034 Board_SetupMuxing
1a001120 g     F .text	000000e4 Chip_UART_SetBaudFDR
1a0001cc  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001cc  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
10000048 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a000f18 g     F .text	00000038 Chip_SSP_Init
1a0001cc  w    F .text	00000002 GINT0_IRQHandler
1a0001cc  w    F .text	00000002 DAC_IRQHandler
1a0006ac g     F .text	00000024 Board_Debug_Init
10000038 g       .data	00000000 _edata
1a000e1c g     F .text	00000020 Chip_I2C_EventHandler
1a0001cc  w    F .text	00000002 M0SUB_IRQHandler
1a000f50 g     F .text	00000150 Chip_SetupCoreClock
1a0001cc  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a000874 g     F .text	00000014 SystemCoreClockUpdate
1a0001cc  w    F .text	00000002 DMA_IRQHandler
1a0001cc  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001558  w    F .text	00000002 .hidden __aeabi_idiv0
1a000184  w    F .text	00000002 BusFault_Handler
1a000d98 g     F .text	00000034 Chip_Clock_Enable
1a0001cc  w    F .text	00000002 UART3_IRQHandler
1a0001cc  w    F .text	00000002 MCPWM_IRQHandler
1a0001cc  w    F .text	00000002 M0APP_IRQHandler
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001cc  w    F .text	00000002 GINT1_IRQHandler
1a000cd0 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0001cc  w    F .text	00000002 GPIO4_IRQHandler
1a0007a4 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 d9 04 00 1a 79 01 00 1a 7d 01 00 1a     ........y...}...
1a000010:	81 01 00 1a 85 01 00 1a 89 01 00 1a a2 73 ff 53     .............s.S
	...
1a00002c:	8d 01 00 1a 91 01 00 1a 00 00 00 00 95 01 00 1a     ................
1a00003c:	e1 03 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	cd 01 00 1a cd 01 00 1a cd 01 00 1a 00 00 00 00     ................
1a000050:	cd 01 00 1a cd 01 00 1a cd 01 00 1a cd 01 00 1a     ................
1a000060:	cd 01 00 1a cd 01 00 1a cd 01 00 1a cd 01 00 1a     ................
1a000070:	cd 01 00 1a cd 01 00 1a cd 01 00 1a cd 01 00 1a     ................
1a000080:	cd 01 00 1a cd 01 00 1a cd 01 00 1a cd 01 00 1a     ................
1a000090:	cd 01 00 1a cd 01 00 1a cd 01 00 1a cd 01 00 1a     ................
1a0000a0:	cd 01 00 1a cd 01 00 1a cd 01 00 1a cd 01 00 1a     ................
1a0000b0:	cd 01 00 1a cd 01 00 1a cd 01 00 1a cd 01 00 1a     ................
1a0000c0:	cd 01 00 1a cd 01 00 1a cd 01 00 1a cd 01 00 1a     ................
1a0000d0:	cd 01 00 1a cd 01 00 1a cd 01 00 1a cd 01 00 1a     ................
1a0000e0:	cd 01 00 1a cd 01 00 1a cd 01 00 1a cd 01 00 1a     ................
1a0000f0:	00 00 00 00 cd 01 00 1a cd 01 00 1a cd 01 00 1a     ................
1a000100:	00 00 00 00 cd 01 00 1a cd 01 00 1a cd 01 00 1a     ................
1a000110:	cd 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a00173c 	.word	0x1a00173c
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000038 	.word	0x00000038
1a000120:	1a00173c 	.word	0x1a00173c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00173c 	.word	0x1a00173c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00173c 	.word	0x1a00173c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00173c 	.word	0x1a00173c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000038 	.word	0x10000038
1a000154:	00000010 	.word	0x00000010
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>
1a00017a:	bf00      	nop

1a00017c <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <HardFault_Handler>
1a00017e:	bf00      	nop

1a000180 <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <MemManage_Handler>
1a000182:	bf00      	nop

1a000184 <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <BusFault_Handler>
1a000186:	bf00      	nop

1a000188 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <UsageFault_Handler>
1a00018a:	bf00      	nop

1a00018c <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a00018c:	e7fe      	b.n	1a00018c <SVC_Handler>
1a00018e:	bf00      	nop

1a000190 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000190:	e7fe      	b.n	1a000190 <DebugMon_Handler>
1a000192:	bf00      	nop

1a000194 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000194:	e7fe      	b.n	1a000194 <PendSV_Handler>
1a000196:	bf00      	nop
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000198:	e7fe      	b.n	1a000198 <PendSV_Handler+0x4>
1a00019a:	bf00      	nop

1a00019c <data_init>:
    PendSV_Handler,                 // The PendSV handler
    SysTick_Handler,                // The SysTick handler
};

__attribute__((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a00019c:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a00019e:	2300      	movs	r3, #0
1a0001a0:	e004      	b.n	1a0001ac <data_init+0x10>
        *pulDest++ = *pulSrc++;
1a0001a2:	6804      	ldr	r4, [r0, #0]
1a0001a4:	600c      	str	r4, [r1, #0]
__attribute__((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a6:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001a8:	3004      	adds	r0, #4
1a0001aa:	3104      	adds	r1, #4
__attribute__((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001ac:	4293      	cmp	r3, r2
1a0001ae:	d3f8      	bcc.n	1a0001a2 <data_init+0x6>
        *pulDest++ = *pulSrc++;
}
1a0001b0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001b4:	4770      	bx	lr
1a0001b6:	bf00      	nop

1a0001b8 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b8:	2300      	movs	r3, #0
1a0001ba:	e003      	b.n	1a0001c4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001bc:	2200      	movs	r2, #0
1a0001be:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001c2:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c4:	428b      	cmp	r3, r1
1a0001c6:	d3f9      	bcc.n	1a0001bc <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001c8:	4770      	bx	lr
1a0001ca:	bf00      	nop

1a0001cc <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001cc:	e7fe      	b.n	1a0001cc <ADC0_IRQHandler>
1a0001ce:	bf00      	nop
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <ConfigurarPuertos>:
/*==================[internal data definition]===============================*/

/*==================[external data definition]===============================*/

/*==================[internal functions definition]==========================*/
void ConfigurarPuertos(void) {
1a000300:	b410      	push	{r4}
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000302:	4a22      	ldr	r2, [pc, #136]	; (1a00038c <ConfigurarPuertos+0x8c>)
1a000304:	23d4      	movs	r3, #212	; 0xd4
1a000306:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
1a00030a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
1a00030e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_ClearValue(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue)
{
	pGPIO->CLR[portNum] = bitValue;
1a000312:	4b1f      	ldr	r3, [pc, #124]	; (1a000390 <ConfigurarPuertos+0x90>)
1a000314:	2007      	movs	r0, #7
1a000316:	f242 2194 	movw	r1, #8852	; 0x2294
1a00031a:	5058      	str	r0, [r3, r1]
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
1a00031c:	f242 0014 	movw	r0, #8212	; 0x2014
1a000320:	5819      	ldr	r1, [r3, r0]
1a000322:	f041 0107 	orr.w	r1, r1, #7
1a000326:	5019      	str	r1, [r3, r0]
1a000328:	21d0      	movs	r1, #208	; 0xd0
1a00032a:	f8c2 1128 	str.w	r1, [r2, #296]	; 0x128
1a00032e:	f8c2 112c 	str.w	r1, [r2, #300]	; 0x12c
1a000332:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_ClearValue(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue)
{
	pGPIO->CLR[portNum] = bitValue;
1a000336:	f503 510a 	add.w	r1, r3, #8832	; 0x2280
1a00033a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
1a00033e:	6008      	str	r0, [r1, #0]
1a000340:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
1a000344:	f242 2184 	movw	r1, #8836	; 0x2284
1a000348:	5058      	str	r0, [r3, r1]
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
1a00034a:	f503 5000 	add.w	r0, r3, #8192	; 0x2000
1a00034e:	6801      	ldr	r1, [r0, #0]
1a000350:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
1a000354:	6001      	str	r1, [r0, #0]
1a000356:	f242 0104 	movw	r1, #8196	; 0x2004
1a00035a:	585c      	ldr	r4, [r3, r1]
1a00035c:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
1a000360:	505c      	str	r4, [r3, r1]
1a000362:	2440      	movs	r4, #64	; 0x40
1a000364:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
1a000368:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
1a00036c:	f8c2 4088 	str.w	r4, [r2, #136]	; 0x88
1a000370:	f8c2 4098 	str.w	r4, [r2, #152]	; 0x98
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a000374:	6802      	ldr	r2, [r0, #0]
1a000376:	f422 7244 	bic.w	r2, r2, #784	; 0x310
1a00037a:	6002      	str	r2, [r0, #0]
1a00037c:	585a      	ldr	r2, [r3, r1]
1a00037e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
1a000382:	505a      	str	r2, [r3, r1]
   Chip_SCU_PinMux(1, 2, SCU_MODE_ENT, SCU_MODE_FUNC0);
   Chip_SCU_PinMux(1, 6, SCU_MODE_ENT, SCU_MODE_FUNC0);
   Chip_GPIO_SetDir(LPC_GPIO_PORT, 0, (1 << 4) | (1 << 8) | (1 << 9), false);
   Chip_GPIO_SetDir(LPC_GPIO_PORT, 1, (1 << 9), false);

}
1a000384:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000388:	4770      	bx	lr
1a00038a:	bf00      	nop
1a00038c:	40086000 	.word	0x40086000
1a000390:	400f4000 	.word	0x400f4000

1a000394 <ConfigurarInterrupcion>:

void ConfigurarInterrupcion(void) {
1a000394:	b508      	push	{r3, lr}
   __asm__ volatile ("cpsid i");
1a000396:	b672      	cpsid	i

   /* Activate SysTick */
   SystemCoreClockUpdate();
1a000398:	f000 fa6c 	bl	1a000874 <SystemCoreClockUpdate>
   SysTick_Config(SystemCoreClock/1000);
1a00039c:	4b0c      	ldr	r3, [pc, #48]	; (1a0003d0 <ConfigurarInterrupcion+0x3c>)
1a00039e:	681b      	ldr	r3, [r3, #0]
1a0003a0:	4a0c      	ldr	r2, [pc, #48]	; (1a0003d4 <ConfigurarInterrupcion+0x40>)
1a0003a2:	fba2 2303 	umull	r2, r3, r2, r3
1a0003a6:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a0003a8:	3b01      	subs	r3, #1
1a0003aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
1a0003ae:	d209      	bcs.n	1a0003c4 <ConfigurarInterrupcion+0x30>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a0003b0:	4a09      	ldr	r2, [pc, #36]	; (1a0003d8 <ConfigurarInterrupcion+0x44>)
1a0003b2:	6053      	str	r3, [r2, #4]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0003b4:	21e0      	movs	r1, #224	; 0xe0
1a0003b6:	4b09      	ldr	r3, [pc, #36]	; (1a0003dc <ConfigurarInterrupcion+0x48>)
1a0003b8:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a0003bc:	2300      	movs	r3, #0
1a0003be:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a0003c0:	2307      	movs	r3, #7
1a0003c2:	6013      	str	r3, [r2, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0003c4:	22e0      	movs	r2, #224	; 0xe0
1a0003c6:	4b05      	ldr	r3, [pc, #20]	; (1a0003dc <ConfigurarInterrupcion+0x48>)
1a0003c8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

   /* Update priority set by SysTick_Config */
   NVIC_SetPriority(SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);

   __asm__ volatile ("cpsie i");
1a0003cc:	b662      	cpsie	i
1a0003ce:	bd08      	pop	{r3, pc}
1a0003d0:	10000044 	.word	0x10000044
1a0003d4:	10624dd3 	.word	0x10624dd3
1a0003d8:	e000e010 	.word	0xe000e010
1a0003dc:	e000ed00 	.word	0xe000ed00

1a0003e0 <SysTick_Handler>:
 * @brief Funcion periodica que se ejecuta con el SysTick
 */
void SysTick_Handler(void) {
   static int contador = 0;

   contador++;
1a0003e0:	4a06      	ldr	r2, [pc, #24]	; (1a0003fc <SysTick_Handler+0x1c>)
1a0003e2:	6813      	ldr	r3, [r2, #0]
1a0003e4:	3301      	adds	r3, #1
1a0003e6:	6013      	str	r3, [r2, #0]
   if (contador > 100) {
1a0003e8:	2b64      	cmp	r3, #100	; 0x64
1a0003ea:	dd06      	ble.n	1a0003fa <SysTick_Handler+0x1a>
      contador = 0;
1a0003ec:	2200      	movs	r2, #0
1a0003ee:	4b03      	ldr	r3, [pc, #12]	; (1a0003fc <SysTick_Handler+0x1c>)
1a0003f0:	601a      	str	r2, [r3, #0]
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinToggle(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->NOT[port] = (1 << pin);
1a0003f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
1a0003f6:	4b02      	ldr	r3, [pc, #8]	; (1a000400 <SysTick_Handler+0x20>)
1a0003f8:	601a      	str	r2, [r3, #0]
1a0003fa:	4770      	bx	lr
1a0003fc:	10000038 	.word	0x10000038
1a000400:	400f6300 	.word	0x400f6300

1a000404 <main>:
 *
 * @remarks This function never returns. Return value is only to avoid compiler
 *          warnings or errors.
 */
int main(void)
{
1a000404:	b570      	push	{r4, r5, r6, lr}
   int estado;
   int teclas;
   int anterior;

   /* perform the needed initialization here */
   ConfigurarPuertos();
1a000406:	f7ff ff7b 	bl	1a000300 <ConfigurarPuertos>
   ConfigurarInterrupcion();
1a00040a:	f7ff ffc3 	bl	1a000394 <ConfigurarInterrupcion>
   
   estado = 0;
   anterior = 0;
1a00040e:	2500      	movs	r5, #0

   /* perform the needed initialization here */
   ConfigurarPuertos();
   ConfigurarInterrupcion();
   
   estado = 0;
1a000410:	462e      	mov	r6, r5
   anterior = 0;
   espera = 5;
1a000412:	2405      	movs	r4, #5
   while(1) {      
      /* add your code here */
      for(contador = 0; contador < espera * 100000; contador++) {
1a000414:	2000      	movs	r0, #0
1a000416:	e030      	b.n	1a00047a <main+0x76>
 * @param	port	: GPIO Port number where @a pin is located
 * @return	Current (raw) state of all GPIO pins
 */
STATIC INLINE uint32_t Chip_GPIO_GetPortValue(LPC_GPIO_T *pGPIO, uint8_t port)
{
	return pGPIO->PIN[port];
1a000418:	492c      	ldr	r1, [pc, #176]	; (1a0004cc <main+0xc8>)
1a00041a:	f501 5304 	add.w	r3, r1, #8448	; 0x2100
1a00041e:	681a      	ldr	r2, [r3, #0]
         teclas = (~Chip_GPIO_GetPortValue(LPC_GPIO_PORT, 0) & ((1 << 9) | (1 << 8))) >> 7;
1a000420:	43d2      	mvns	r2, r2
1a000422:	09d2      	lsrs	r2, r2, #7
1a000424:	f002 0206 	and.w	r2, r2, #6
1a000428:	681b      	ldr	r3, [r3, #0]
         teclas |= (~Chip_GPIO_GetPortValue(LPC_GPIO_PORT, 0) & (1 << 4)) >> 4;
1a00042a:	43db      	mvns	r3, r3
1a00042c:	f3c3 1300 	ubfx	r3, r3, #4, #1
1a000430:	431a      	orrs	r2, r3
1a000432:	f242 1304 	movw	r3, #8452	; 0x2104
1a000436:	58cb      	ldr	r3, [r1, r3]
         teclas |= (~Chip_GPIO_GetPortValue(LPC_GPIO_PORT, 1) & (1 << 9)) >> 6;
1a000438:	43db      	mvns	r3, r3
1a00043a:	099b      	lsrs	r3, r3, #6
1a00043c:	f003 0308 	and.w	r3, r3, #8
1a000440:	4313      	orrs	r3, r2
         
         Chip_GPIO_SetPinState(LPC_GPIO_PORT, 1, 11, teclas & (1 << 2));
1a000442:	f3c3 0280 	ubfx	r2, r3, #2, #1
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a000446:	f881 202b 	strb.w	r2, [r1, #43]	; 0x2b
         Chip_GPIO_SetPinState(LPC_GPIO_PORT, 1, 12, teclas & (1 << 3));
1a00044a:	08da      	lsrs	r2, r3, #3
1a00044c:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c

         if ((teclas & (1 << 0)) && (~anterior & (1 << 0))) {
1a000450:	f013 0f01 	tst.w	r3, #1
1a000454:	d006      	beq.n	1a000464 <main+0x60>
1a000456:	f015 0f01 	tst.w	r5, #1
1a00045a:	d103      	bne.n	1a000464 <main+0x60>
            if (espera < 9) espera++;
1a00045c:	2c08      	cmp	r4, #8
1a00045e:	dc0a      	bgt.n	1a000476 <main+0x72>
1a000460:	3401      	adds	r4, #1
1a000462:	e008      	b.n	1a000476 <main+0x72>
         } else if ((teclas & (1 << 1)) && (~anterior & (1 << 1))) {
1a000464:	f013 0f02 	tst.w	r3, #2
1a000468:	d005      	beq.n	1a000476 <main+0x72>
1a00046a:	f015 0f02 	tst.w	r5, #2
1a00046e:	d102      	bne.n	1a000476 <main+0x72>
            if (espera > 1) espera--;
1a000470:	2c01      	cmp	r4, #1
1a000472:	dd00      	ble.n	1a000476 <main+0x72>
1a000474:	3c01      	subs	r4, #1
   estado = 0;
   anterior = 0;
   espera = 5;
   while(1) {      
      /* add your code here */
      for(contador = 0; contador < espera * 100000; contador++) {
1a000476:	3001      	adds	r0, #1
            if (espera < 9) espera++;
         } else if ((teclas & (1 << 1)) && (~anterior & (1 << 1))) {
            if (espera > 1) espera--;
         }

         anterior = teclas;
1a000478:	461d      	mov	r5, r3
   estado = 0;
   anterior = 0;
   espera = 5;
   while(1) {      
      /* add your code here */
      for(contador = 0; contador < espera * 100000; contador++) {
1a00047a:	4b15      	ldr	r3, [pc, #84]	; (1a0004d0 <main+0xcc>)
1a00047c:	fb03 f304 	mul.w	r3, r3, r4
1a000480:	4298      	cmp	r0, r3
1a000482:	dbc9      	blt.n	1a000418 <main+0x14>
         }

         anterior = teclas;
      }

      estado++;
1a000484:	3601      	adds	r6, #1
      switch (estado) {
1a000486:	2e01      	cmp	r6, #1
1a000488:	d002      	beq.n	1a000490 <main+0x8c>
1a00048a:	2e02      	cmp	r6, #2
1a00048c:	d00a      	beq.n	1a0004a4 <main+0xa0>
1a00048e:	e013      	b.n	1a0004b8 <main+0xb4>
1a000490:	4b0e      	ldr	r3, [pc, #56]	; (1a0004cc <main+0xc8>)
1a000492:	2201      	movs	r2, #1
1a000494:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
1a000498:	2200      	movs	r2, #0
1a00049a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
1a00049e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
1a0004a2:	e7b7      	b.n	1a000414 <main+0x10>
1a0004a4:	4b09      	ldr	r3, [pc, #36]	; (1a0004cc <main+0xc8>)
1a0004a6:	2200      	movs	r2, #0
1a0004a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
1a0004ac:	2101      	movs	r1, #1
1a0004ae:	f883 10a1 	strb.w	r1, [r3, #161]	; 0xa1
1a0004b2:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
1a0004b6:	e7ad      	b.n	1a000414 <main+0x10>
1a0004b8:	4b04      	ldr	r3, [pc, #16]	; (1a0004cc <main+0xc8>)
1a0004ba:	2600      	movs	r6, #0
1a0004bc:	f883 60a0 	strb.w	r6, [r3, #160]	; 0xa0
1a0004c0:	f883 60a1 	strb.w	r6, [r3, #161]	; 0xa1
1a0004c4:	2201      	movs	r2, #1
1a0004c6:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
1a0004ca:	e7a3      	b.n	1a000414 <main+0x10>
1a0004cc:	400f4000 	.word	0x400f4000
1a0004d0:	000186a0 	.word	0x000186a0

1a0004d4 <initialise_monitor_handles>:
WEAK void SysTick_Handler(void);

WEAK void initialise_monitor_handles(void);

void initialise_monitor_handles(void)
{
1a0004d4:	4770      	bx	lr
1a0004d6:	bf00      	nop

1a0004d8 <Reset_Handler>:
extern unsigned int __data_section_table_end;
extern unsigned int __bss_section_table;
extern unsigned int __bss_section_table_end;

void Reset_Handler(void) {
    __asm__ volatile("cpsid i");
1a0004d8:	b672      	cpsid	i

    volatile unsigned int *RESET_CONTROL = (unsigned int *) 0x40053100;
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0004da:	4a1a      	ldr	r2, [pc, #104]	; (1a000544 <Reset_Handler+0x6c>)
1a0004dc:	4b1a      	ldr	r3, [pc, #104]	; (1a000548 <Reset_Handler+0x70>)
1a0004de:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0004e0:	4a1a      	ldr	r2, [pc, #104]	; (1a00054c <Reset_Handler+0x74>)
1a0004e2:	3304      	adds	r3, #4
1a0004e4:	601a      	str	r2, [r3, #0]

    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0004e6:	2300      	movs	r3, #0
1a0004e8:	e005      	b.n	1a0004f6 <Reset_Handler+0x1e>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0004ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0004ee:	4a18      	ldr	r2, [pc, #96]	; (1a000550 <Reset_Handler+0x78>)
1a0004f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    *(RESET_CONTROL + 0) = 0x10DF1000;
    *(RESET_CONTROL + 1) = 0x01DFF7FF;

    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0004f4:	3301      	adds	r3, #1
1a0004f6:	2b07      	cmp	r3, #7
1a0004f8:	d9f7      	bls.n	1a0004ea <Reset_Handler+0x12>
extern unsigned int __data_section_table;
extern unsigned int __data_section_table_end;
extern unsigned int __bss_section_table;
extern unsigned int __bss_section_table_end;

void Reset_Handler(void) {
1a0004fa:	b510      	push	{r4, lr}
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }
    __asm__ volatile("cpsie i");
1a0004fc:	b662      	cpsie	i

    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    SectionTableAddr = &__data_section_table;
1a0004fe:	4b15      	ldr	r3, [pc, #84]	; (1a000554 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000500:	e007      	b.n	1a000512 <Reset_Handler+0x3a>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a000502:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000506:	689a      	ldr	r2, [r3, #8]
1a000508:	6859      	ldr	r1, [r3, #4]
1a00050a:	6818      	ldr	r0, [r3, #0]
1a00050c:	f7ff fe46 	bl	1a00019c <data_init>

    SectionTableAddr = &__data_section_table;
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a000510:	4623      	mov	r3, r4

    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    SectionTableAddr = &__data_section_table;
    while (SectionTableAddr < &__data_section_table_end) {
1a000512:	4a11      	ldr	r2, [pc, #68]	; (1a000558 <Reset_Handler+0x80>)
1a000514:	4293      	cmp	r3, r2
1a000516:	d3f4      	bcc.n	1a000502 <Reset_Handler+0x2a>
1a000518:	e006      	b.n	1a000528 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a00051a:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a00051c:	6859      	ldr	r1, [r3, #4]
1a00051e:	f854 0b08 	ldr.w	r0, [r4], #8
1a000522:	f7ff fe49 	bl	1a0001b8 <bss_init>
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a000526:	4623      	mov	r3, r4
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    while (SectionTableAddr < &__bss_section_table_end) {
1a000528:	4a0c      	ldr	r2, [pc, #48]	; (1a00055c <Reset_Handler+0x84>)
1a00052a:	4293      	cmp	r3, r2
1a00052c:	d3f5      	bcc.n	1a00051a <Reset_Handler+0x42>
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
    }

    SystemInit();
1a00052e:	f000 fe69 	bl	1a001204 <SystemInit>

    __libc_init_array();
1a000532:	f001 f813 	bl	1a00155c <__libc_init_array>
    initialise_monitor_handles();
1a000536:	f7ff ffcd 	bl	1a0004d4 <initialise_monitor_handles>
    main();
1a00053a:	f7ff ff63 	bl	1a000404 <main>
    while (1) {
        __asm__ volatile("wfi");
1a00053e:	bf30      	wfi
1a000540:	e7fd      	b.n	1a00053e <Reset_Handler+0x66>
1a000542:	bf00      	nop
1a000544:	10df1000 	.word	0x10df1000
1a000548:	40053100 	.word	0x40053100
1a00054c:	01dff7ff 	.word	0x01dff7ff
1a000550:	e000e280 	.word	0xe000e280
1a000554:	1a000114 	.word	0x1a000114
1a000558:	1a000150 	.word	0x1a000150
1a00055c:	1a000178 	.word	0x1a000178

1a000560 <_fini>:
    for (loop = 0; loop < len; loop = loop + 4)
        *pulDest++ = 0;
}

WEAK void _fini(void);
void _fini(void) {}
1a000560:	4770      	bx	lr
1a000562:	bf00      	nop

1a000564 <_init>:

WEAK void _init(void);
void _init(void) {}
1a000564:	4770      	bx	lr
1a000566:	bf00      	nop

1a000568 <Board_LED_Init>:
#define GPIO_BUTTONS_SIZE   (sizeof(GpioButtons) / sizeof(struct gpio_t))
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
1a000568:	b470      	push	{r4, r5, r6}
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00056a:	2100      	movs	r1, #0
1a00056c:	e014      	b.n	1a000598 <Board_LED_Init+0x30>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00056e:	4a0c      	ldr	r2, [pc, #48]	; (1a0005a0 <Board_LED_Init+0x38>)
1a000570:	f812 4011 	ldrb.w	r4, [r2, r1, lsl #1]
1a000574:	eb02 0241 	add.w	r2, r2, r1, lsl #1
1a000578:	7850      	ldrb	r0, [r2, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a00057a:	4b0a      	ldr	r3, [pc, #40]	; (1a0005a4 <Board_LED_Init+0x3c>)
1a00057c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a000580:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a000584:	2201      	movs	r2, #1
1a000586:	4082      	lsls	r2, r0
1a000588:	4332      	orrs	r2, r6
1a00058a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a00058e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a000592:	2200      	movs	r2, #0
1a000594:	541a      	strb	r2, [r3, r0]
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000596:	3101      	adds	r1, #1
1a000598:	2905      	cmp	r1, #5
1a00059a:	d9e8      	bls.n	1a00056e <Board_LED_Init+0x6>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a00059c:	bc70      	pop	{r4, r5, r6}
1a00059e:	4770      	bx	lr
1a0005a0:	1a0015dc 	.word	0x1a0015dc
1a0005a4:	400f4000 	.word	0x400f4000

1a0005a8 <Board_TEC_Init>:


static void Board_TEC_Init()
{
1a0005a8:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0005aa:	2300      	movs	r3, #0
1a0005ac:	e011      	b.n	1a0005d2 <Board_TEC_Init+0x2a>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0005ae:	490b      	ldr	r1, [pc, #44]	; (1a0005dc <Board_TEC_Init+0x34>)
1a0005b0:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0005b4:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0005b8:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0005ba:	4c09      	ldr	r4, [pc, #36]	; (1a0005e0 <Board_TEC_Init+0x38>)
1a0005bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0005c0:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a0005c4:	2101      	movs	r1, #1
1a0005c6:	40a9      	lsls	r1, r5
1a0005c8:	ea20 0101 	bic.w	r1, r0, r1
1a0005cc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0005d0:	3301      	adds	r3, #1
1a0005d2:	2b03      	cmp	r3, #3
1a0005d4:	d9eb      	bls.n	1a0005ae <Board_TEC_Init+0x6>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a0005d6:	bc30      	pop	{r4, r5}
1a0005d8:	4770      	bx	lr
1a0005da:	bf00      	nop
1a0005dc:	1a0015d4 	.word	0x1a0015d4
1a0005e0:	400f4000 	.word	0x400f4000

1a0005e4 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
1a0005e4:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0005e6:	2300      	movs	r3, #0
1a0005e8:	e011      	b.n	1a00060e <Board_GPIO_Init+0x2a>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0005ea:	490b      	ldr	r1, [pc, #44]	; (1a000618 <Board_GPIO_Init+0x34>)
1a0005ec:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0005f0:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0005f4:	784d      	ldrb	r5, [r1, #1]
1a0005f6:	4c09      	ldr	r4, [pc, #36]	; (1a00061c <Board_GPIO_Init+0x38>)
1a0005f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0005fc:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a000600:	2101      	movs	r1, #1
1a000602:	40a9      	lsls	r1, r5
1a000604:	ea20 0101 	bic.w	r1, r0, r1
1a000608:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00060c:	3301      	adds	r3, #1
1a00060e:	2b08      	cmp	r3, #8
1a000610:	d9eb      	bls.n	1a0005ea <Board_GPIO_Init+0x6>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a000612:	bc30      	pop	{r4, r5}
1a000614:	4770      	bx	lr
1a000616:	bf00      	nop
1a000618:	1a0015b8 	.word	0x1a0015b8
1a00061c:	400f4000 	.word	0x400f4000

1a000620 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000620:	b510      	push	{r4, lr}
1a000622:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a000624:	4c08      	ldr	r4, [pc, #32]	; (1a000648 <Board_ADC_Init+0x28>)
1a000626:	4669      	mov	r1, sp
1a000628:	4620      	mov	r0, r4
1a00062a:	f000 f8e3 	bl	1a0007f4 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00062e:	4a07      	ldr	r2, [pc, #28]	; (1a00064c <Board_ADC_Init+0x2c>)
1a000630:	4669      	mov	r1, sp
1a000632:	4620      	mov	r0, r4
1a000634:	f000 f8fe 	bl	1a000834 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000638:	2200      	movs	r2, #0
1a00063a:	4669      	mov	r1, sp
1a00063c:	4620      	mov	r0, r4
1a00063e:	f000 f913 	bl	1a000868 <Chip_ADC_SetResolution>
}
1a000642:	b002      	add	sp, #8
1a000644:	bd10      	pop	{r4, pc}
1a000646:	bf00      	nop
1a000648:	400e3000 	.word	0x400e3000
1a00064c:	00061a80 	.word	0x00061a80

1a000650 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a000650:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a000652:	4c0b      	ldr	r4, [pc, #44]	; (1a000680 <Board_SPI_Init+0x30>)
1a000654:	4620      	mov	r0, r4
1a000656:	f000 fc5f 	bl	1a000f18 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00065a:	6863      	ldr	r3, [r4, #4]
1a00065c:	f023 0304 	bic.w	r3, r3, #4
1a000660:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000662:	6823      	ldr	r3, [r4, #0]
1a000664:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000668:	f043 0307 	orr.w	r3, r3, #7
1a00066c:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00066e:	4905      	ldr	r1, [pc, #20]	; (1a000684 <Board_SPI_Init+0x34>)
1a000670:	4620      	mov	r0, r4
1a000672:	f000 fc31 	bl	1a000ed8 <Chip_SSP_SetBitRate>
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000676:	6863      	ldr	r3, [r4, #4]
1a000678:	f043 0302 	orr.w	r3, r3, #2
1a00067c:	6063      	str	r3, [r4, #4]
1a00067e:	bd10      	pop	{r4, pc}
1a000680:	400c5000 	.word	0x400c5000
1a000684:	000186a0 	.word	0x000186a0

1a000688 <Board_I2C_Init>:
    }
}


static void Board_I2C_Init()
{
1a000688:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a00068a:	2000      	movs	r0, #0
1a00068c:	f000 fbd6 	bl	1a000e3c <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000690:	f640 0208 	movw	r2, #2056	; 0x808
1a000694:	4b03      	ldr	r3, [pc, #12]	; (1a0006a4 <Board_I2C_Init+0x1c>)
1a000696:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_SCU_I2C0PinConfig(BOARD_I2C_MODE);
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a00069a:	4903      	ldr	r1, [pc, #12]	; (1a0006a8 <Board_I2C_Init+0x20>)
1a00069c:	2000      	movs	r0, #0
1a00069e:	f000 fbdf 	bl	1a000e60 <Chip_I2C_SetClockRate>
1a0006a2:	bd08      	pop	{r3, pc}
1a0006a4:	40086000 	.word	0x40086000
1a0006a8:	000f4240 	.word	0x000f4240

1a0006ac <Board_Debug_Init>:
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
}


void Board_Debug_Init(void)
{
1a0006ac:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a0006ae:	4c07      	ldr	r4, [pc, #28]	; (1a0006cc <Board_Debug_Init+0x20>)
1a0006b0:	4620      	mov	r0, r4
1a0006b2:	f000 fd0b 	bl	1a0010cc <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0006b6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0006ba:	4620      	mov	r0, r4
1a0006bc:	f000 fd30 	bl	1a001120 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0006c0:	2303      	movs	r3, #3
1a0006c2:	60e3      	str	r3, [r4, #12]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a0006c4:	2301      	movs	r3, #1
1a0006c6:	65e3      	str	r3, [r4, #92]	; 0x5c
1a0006c8:	bd10      	pop	{r4, pc}
1a0006ca:	bf00      	nop
1a0006cc:	400c1000 	.word	0x400c1000

1a0006d0 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0006d0:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0006d2:	f7ff ffeb 	bl	1a0006ac <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0006d6:	4808      	ldr	r0, [pc, #32]	; (1a0006f8 <Board_Init+0x28>)
1a0006d8:	f000 fb9e 	bl	1a000e18 <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a0006dc:	f7ff ff82 	bl	1a0005e4 <Board_GPIO_Init>
   Board_ADC_Init();
1a0006e0:	f7ff ff9e 	bl	1a000620 <Board_ADC_Init>
   Board_SPI_Init();
1a0006e4:	f7ff ffb4 	bl	1a000650 <Board_SPI_Init>
   Board_I2C_Init();
1a0006e8:	f7ff ffce 	bl	1a000688 <Board_I2C_Init>

   Board_LED_Init();
1a0006ec:	f7ff ff3c 	bl	1a000568 <Board_LED_Init>
   Board_TEC_Init();
1a0006f0:	f7ff ff5a 	bl	1a0005a8 <Board_TEC_Init>
1a0006f4:	bd08      	pop	{r3, pc}
1a0006f6:	bf00      	nop
1a0006f8:	400f4000 	.word	0x400f4000

1a0006fc <__stdio_init>:

int __stdio_getchar() {
   return Board_UARTGetChar();;
}

void __stdio_init() {
1a0006fc:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a0006fe:	f7ff ffd5 	bl	1a0006ac <Board_Debug_Init>
1a000702:	bd08      	pop	{r3, pc}

1a000704 <Board_SetupMuxing>:
    #endif
};


void Board_SetupMuxing(void)
{
1a000704:	b410      	push	{r4}
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000706:	2300      	movs	r3, #0
1a000708:	e00c      	b.n	1a000724 <Board_SetupMuxing+0x20>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00070a:	4a09      	ldr	r2, [pc, #36]	; (1a000730 <Board_SetupMuxing+0x2c>)
1a00070c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000710:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000714:	784a      	ldrb	r2, [r1, #1]
1a000716:	8848      	ldrh	r0, [r1, #2]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000718:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00071c:	4905      	ldr	r1, [pc, #20]	; (1a000734 <Board_SetupMuxing+0x30>)
1a00071e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000722:	3301      	adds	r3, #1
1a000724:	2b1c      	cmp	r3, #28
1a000726:	d9f0      	bls.n	1a00070a <Board_SetupMuxing+0x6>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000728:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00072c:	4770      	bx	lr
1a00072e:	bf00      	nop
1a000730:	1a0015ec 	.word	0x1a0015ec
1a000734:	40086000 	.word	0x40086000

1a000738 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000738:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00073a:	4a17      	ldr	r2, [pc, #92]	; (1a000798 <Board_SetupClocking+0x60>)
1a00073c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000740:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000744:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000748:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a00074c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000750:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000754:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000758:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a00075c:	2201      	movs	r2, #1
1a00075e:	490f      	ldr	r1, [pc, #60]	; (1a00079c <Board_SetupClocking+0x64>)
1a000760:	2006      	movs	r0, #6
1a000762:	f000 fbf5 	bl	1a000f50 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000766:	2400      	movs	r4, #0
1a000768:	e00a      	b.n	1a000780 <Board_SetupClocking+0x48>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00076a:	480d      	ldr	r0, [pc, #52]	; (1a0007a0 <Board_SetupClocking+0x68>)
1a00076c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000770:	2301      	movs	r3, #1
1a000772:	788a      	ldrb	r2, [r1, #2]
1a000774:	7849      	ldrb	r1, [r1, #1]
1a000776:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00077a:	f000 faa9 	bl	1a000cd0 <Chip_Clock_SetBaseClock>
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00077e:	3401      	adds	r4, #1
1a000780:	2c00      	cmp	r4, #0
1a000782:	d0f2      	beq.n	1a00076a <Board_SetupClocking+0x32>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000784:	4b04      	ldr	r3, [pc, #16]	; (1a000798 <Board_SetupClocking+0x60>)
1a000786:	685a      	ldr	r2, [r3, #4]
1a000788:	f022 020c 	bic.w	r2, r2, #12
1a00078c:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a00078e:	685a      	ldr	r2, [r3, #4]
1a000790:	f042 0203 	orr.w	r2, r2, #3
1a000794:	605a      	str	r2, [r3, #4]
1a000796:	bd10      	pop	{r4, pc}
1a000798:	40043000 	.word	0x40043000
1a00079c:	0c28cb00 	.word	0x0c28cb00
1a0007a0:	1a0015e8 	.word	0x1a0015e8

1a0007a4 <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0007a4:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0007a6:	f7ff ffad 	bl	1a000704 <Board_SetupMuxing>
    Board_SetupClocking();
1a0007aa:	f7ff ffc5 	bl	1a000738 <Board_SetupClocking>
1a0007ae:	bd08      	pop	{r3, pc}

1a0007b0 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0007b0:	4b03      	ldr	r3, [pc, #12]	; (1a0007c0 <Chip_ADC_GetClockIndex+0x10>)
1a0007b2:	4298      	cmp	r0, r3
1a0007b4:	d101      	bne.n	1a0007ba <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
1a0007b6:	2004      	movs	r0, #4
1a0007b8:	4770      	bx	lr
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0007ba:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0007bc:	4770      	bx	lr
1a0007be:	bf00      	nop
1a0007c0:	400e4000 	.word	0x400e4000

1a0007c4 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0007c4:	b570      	push	{r4, r5, r6, lr}
1a0007c6:	460d      	mov	r5, r1
1a0007c8:	4614      	mov	r4, r2
1a0007ca:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0007cc:	f7ff fff0 	bl	1a0007b0 <Chip_ADC_GetClockIndex>
1a0007d0:	f000 fafc 	bl	1a000dcc <Chip_Clock_GetRate>
	if (burstMode) {
1a0007d4:	b115      	cbz	r5, 1a0007dc <getClkDiv+0x18>
		fullAdcRate = adcRate * clks;
1a0007d6:	fb04 f406 	mul.w	r4, r4, r6
1a0007da:	e003      	b.n	1a0007e4 <getClkDiv+0x20>
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a0007dc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0007e0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0007e4:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0007e8:	0064      	lsls	r4, r4, #1
1a0007ea:	fbb0 f4f4 	udiv	r4, r0, r4
1a0007ee:	1e60      	subs	r0, r4, #1
	return div;
}
1a0007f0:	b2c0      	uxtb	r0, r0
1a0007f2:	bd70      	pop	{r4, r5, r6, pc}

1a0007f4 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0007f4:	b538      	push	{r3, r4, r5, lr}
1a0007f6:	4605      	mov	r5, r0
1a0007f8:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0007fa:	f7ff ffd9 	bl	1a0007b0 <Chip_ADC_GetClockIndex>
1a0007fe:	2301      	movs	r3, #1
1a000800:	461a      	mov	r2, r3
1a000802:	4619      	mov	r1, r3
1a000804:	f000 faaa 	bl	1a000d5c <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000808:	2100      	movs	r1, #0
1a00080a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a00080c:	4a08      	ldr	r2, [pc, #32]	; (1a000830 <Chip_ADC_Init+0x3c>)
1a00080e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000810:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000812:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000814:	230b      	movs	r3, #11
1a000816:	4628      	mov	r0, r5
1a000818:	f7ff ffd4 	bl	1a0007c4 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00081c:	0200      	lsls	r0, r0, #8
1a00081e:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000822:	7920      	ldrb	r0, [r4, #4]
1a000824:	0440      	lsls	r0, r0, #17
1a000826:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00082a:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a00082c:	6028      	str	r0, [r5, #0]
1a00082e:	bd38      	pop	{r3, r4, r5, pc}
1a000830:	00061a80 	.word	0x00061a80

1a000834 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000834:	b570      	push	{r4, r5, r6, lr}
1a000836:	4605      	mov	r5, r0
1a000838:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00083a:	6804      	ldr	r4, [r0, #0]
1a00083c:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000840:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000844:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000846:	790b      	ldrb	r3, [r1, #4]
1a000848:	f1c3 030b 	rsb	r3, r3, #11
1a00084c:	b2db      	uxtb	r3, r3
1a00084e:	7949      	ldrb	r1, [r1, #5]
1a000850:	f7ff ffb8 	bl	1a0007c4 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000854:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000858:	7930      	ldrb	r0, [r6, #4]
1a00085a:	0440      	lsls	r0, r0, #17
1a00085c:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000860:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a000862:	6028      	str	r0, [r5, #0]
1a000864:	bd70      	pop	{r4, r5, r6, pc}
1a000866:	bf00      	nop

1a000868 <Chip_ADC_SetResolution>:
}

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000868:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a00086a:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a00086c:	680a      	ldr	r2, [r1, #0]
1a00086e:	f7ff ffe1 	bl	1a000834 <Chip_ADC_SetSampleRate>
1a000872:	bd08      	pop	{r3, pc}

1a000874 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000874:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000876:	2069      	movs	r0, #105	; 0x69
1a000878:	f000 faa8 	bl	1a000dcc <Chip_Clock_GetRate>
1a00087c:	4b01      	ldr	r3, [pc, #4]	; (1a000884 <SystemCoreClockUpdate+0x10>)
1a00087e:	6018      	str	r0, [r3, #0]
1a000880:	bd08      	pop	{r3, pc}
1a000882:	bf00      	nop
1a000884:	10000044 	.word	0x10000044

1a000888 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000888:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a00088a:	680b      	ldr	r3, [r1, #0]
1a00088c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000890:	d002      	beq.n	1a000898 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000896:	600b      	str	r3, [r1, #0]
1a000898:	4607      	mov	r7, r0
1a00089a:	2501      	movs	r5, #1
1a00089c:	e042      	b.n	1a000924 <pll_calc_divs+0x9c>
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a00089e:	f8d1 e000 	ldr.w	lr, [r1]
1a0008a2:	f01e 0f40 	tst.w	lr, #64	; 0x40
1a0008a6:	d008      	beq.n	1a0008ba <pll_calc_divs+0x32>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0008a8:	1c73      	adds	r3, r6, #1
1a0008aa:	fa04 f203 	lsl.w	r2, r4, r3
1a0008ae:	694b      	ldr	r3, [r1, #20]
1a0008b0:	fb03 f302 	mul.w	r3, r3, r2
1a0008b4:	fbb3 f3f5 	udiv	r3, r3, r5
1a0008b8:	e004      	b.n	1a0008c4 <pll_calc_divs+0x3c>
				} else {
					fcco = (m * ppll->fin) / n;
1a0008ba:	694b      	ldr	r3, [r1, #20]
1a0008bc:	fb03 f304 	mul.w	r3, r3, r4
1a0008c0:	fbb3 f3f5 	udiv	r3, r3, r5
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0008c4:	4a19      	ldr	r2, [pc, #100]	; (1a00092c <pll_calc_divs+0xa4>)
1a0008c6:	4293      	cmp	r3, r2
1a0008c8:	d920      	bls.n	1a00090c <pll_calc_divs+0x84>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0008ca:	4a19      	ldr	r2, [pc, #100]	; (1a000930 <pll_calc_divs+0xa8>)
1a0008cc:	4293      	cmp	r3, r2
1a0008ce:	d823      	bhi.n	1a000918 <pll_calc_divs+0x90>
				if (ppll->ctrl & (1 << 7)) {
1a0008d0:	f01e 0f80 	tst.w	lr, #128	; 0x80
1a0008d4:	d103      	bne.n	1a0008de <pll_calc_divs+0x56>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
1a0008d6:	1c72      	adds	r2, r6, #1
1a0008d8:	fa23 f202 	lsr.w	r2, r3, r2
1a0008dc:	e000      	b.n	1a0008e0 <pll_calc_divs+0x58>
					fcco = (m * ppll->fin) / n;
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0008de:	461a      	mov	r2, r3
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0008e0:	ebb0 0e02 	subs.w	lr, r0, r2
1a0008e4:	d502      	bpl.n	1a0008ec <pll_calc_divs+0x64>
		return -val;
1a0008e6:	f1ce 0c00 	rsb	ip, lr, #0
1a0008ea:	e000      	b.n	1a0008ee <pll_calc_divs+0x66>
	return val;
1a0008ec:	46f4      	mov	ip, lr
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a0008ee:	4567      	cmp	r7, ip
1a0008f0:	d90c      	bls.n	1a00090c <pll_calc_divs+0x84>
					ppll->nsel = n;
1a0008f2:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0008f4:	1c77      	adds	r7, r6, #1
1a0008f6:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0008f8:	610c      	str	r4, [r1, #16]
					ppll->fout = fout;
1a0008fa:	618a      	str	r2, [r1, #24]
					ppll->fcco = fcco;
1a0008fc:	61cb      	str	r3, [r1, #28]
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0008fe:	f1be 0f00 	cmp.w	lr, #0
1a000902:	da02      	bge.n	1a00090a <pll_calc_divs+0x82>
		return -val;
1a000904:	f1ce 0700 	rsb	r7, lr, #0
1a000908:	e000      	b.n	1a00090c <pll_calc_divs+0x84>
	return val;
1a00090a:	4677      	mov	r7, lr
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
1a00090c:	3401      	adds	r4, #1
1a00090e:	e000      	b.n	1a000912 <pll_calc_divs+0x8a>
1a000910:	2401      	movs	r4, #1
1a000912:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a000916:	ddc2      	ble.n	1a00089e <pll_calc_divs+0x16>
	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000918:	3601      	adds	r6, #1
1a00091a:	e000      	b.n	1a00091e <pll_calc_divs+0x96>
1a00091c:	2600      	movs	r6, #0
1a00091e:	2e03      	cmp	r6, #3
1a000920:	ddf6      	ble.n	1a000910 <pll_calc_divs+0x88>

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
1a000922:	3501      	adds	r5, #1
1a000924:	2d04      	cmp	r5, #4
1a000926:	ddf9      	ble.n	1a00091c <pll_calc_divs+0x94>
					prev = ABS(freq - fout);
				}
			}
		}
	}
}
1a000928:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00092a:	bf00      	nop
1a00092c:	094c5eff 	.word	0x094c5eff
1a000930:	1312d000 	.word	0x1312d000

1a000934 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000934:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000936:	b099      	sub	sp, #100	; 0x64
1a000938:	4605      	mov	r5, r0
1a00093a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a00093c:	2260      	movs	r2, #96	; 0x60
1a00093e:	2100      	movs	r1, #0
1a000940:	4668      	mov	r0, sp
1a000942:	f000 fe31 	bl	1a0015a8 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000946:	2380      	movs	r3, #128	; 0x80
1a000948:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00094a:	6963      	ldr	r3, [r4, #20]
1a00094c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00094e:	7923      	ldrb	r3, [r4, #4]
1a000950:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000954:	4669      	mov	r1, sp
1a000956:	4628      	mov	r0, r5
1a000958:	f7ff ff96 	bl	1a000888 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a00095c:	9b06      	ldr	r3, [sp, #24]
1a00095e:	429d      	cmp	r5, r3
1a000960:	d107      	bne.n	1a000972 <pll_get_frac+0x3e>
		*ppll = pll[0];
1a000962:	466d      	mov	r5, sp
1a000964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000968:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00096c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000970:	e05e      	b.n	1a000a30 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a000972:	1aeb      	subs	r3, r5, r3
1a000974:	d500      	bpl.n	1a000978 <pll_get_frac+0x44>
		return -val;
1a000976:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000978:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a00097a:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00097c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000980:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000982:	6963      	ldr	r3, [r4, #20]
1a000984:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000986:	7923      	ldrb	r3, [r4, #4]
1a000988:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00098c:	a910      	add	r1, sp, #64	; 0x40
1a00098e:	4628      	mov	r0, r5
1a000990:	f7ff ff7a 	bl	1a000888 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000994:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000996:	429d      	cmp	r5, r3
1a000998:	d107      	bne.n	1a0009aa <pll_get_frac+0x76>
		*ppll = pll[2];
1a00099a:	ad10      	add	r5, sp, #64	; 0x40
1a00099c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00099e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0009a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0009a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0009a8:	e042      	b.n	1a000a30 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0009aa:	1aeb      	subs	r3, r5, r3
1a0009ac:	d500      	bpl.n	1a0009b0 <pll_get_frac+0x7c>
		return -val;
1a0009ae:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0009b0:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0009b2:	4b20      	ldr	r3, [pc, #128]	; (1a000a34 <pll_get_frac+0x100>)
1a0009b4:	429d      	cmp	r5, r3
1a0009b6:	d812      	bhi.n	1a0009de <pll_get_frac+0xaa>
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a0009b8:	2340      	movs	r3, #64	; 0x40
1a0009ba:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0009bc:	6963      	ldr	r3, [r4, #20]
1a0009be:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0009c0:	a908      	add	r1, sp, #32
1a0009c2:	4628      	mov	r0, r5
1a0009c4:	f7ff ff60 	bl	1a000888 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0009c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0009ca:	429d      	cmp	r5, r3
1a0009cc:	d107      	bne.n	1a0009de <pll_get_frac+0xaa>
			*ppll = pll[1];
1a0009ce:	ad08      	add	r5, sp, #32
1a0009d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0009d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0009d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0009d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0009dc:	e028      	b.n	1a000a30 <pll_get_frac+0xfc>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0009de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0009e0:	1aed      	subs	r5, r5, r3
1a0009e2:	d500      	bpl.n	1a0009e6 <pll_get_frac+0xb2>
		return -val;
1a0009e4:	426d      	negs	r5, r5
		}
	}
	diff[1] = ABS(freq - pll[1].fout);

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0009e6:	42ae      	cmp	r6, r5
1a0009e8:	dc11      	bgt.n	1a000a0e <pll_get_frac+0xda>
		if (diff[0] <= diff[2]) {
1a0009ea:	42be      	cmp	r6, r7
1a0009ec:	dc07      	bgt.n	1a0009fe <pll_get_frac+0xca>
			*ppll = pll[0];
1a0009ee:	466d      	mov	r5, sp
1a0009f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0009f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0009f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0009f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0009fc:	e018      	b.n	1a000a30 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a0009fe:	ad10      	add	r5, sp, #64	; 0x40
1a000a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000a0c:	e010      	b.n	1a000a30 <pll_get_frac+0xfc>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a000a0e:	42af      	cmp	r7, r5
1a000a10:	db07      	blt.n	1a000a22 <pll_get_frac+0xee>
			*ppll = pll[1];
1a000a12:	ad08      	add	r5, sp, #32
1a000a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000a20:	e006      	b.n	1a000a30 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a000a22:	ad10      	add	r5, sp, #64	; 0x40
1a000a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
	}
}
1a000a30:	b019      	add	sp, #100	; 0x64
1a000a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000a34:	068e7780 	.word	0x068e7780

1a000a38 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000a38:	b430      	push	{r4, r5}
1a000a3a:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000a3c:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000a3e:	201c      	movs	r0, #28
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000a40:	e011      	b.n	1a000a66 <Chip_Clock_FindBaseClock+0x2e>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000a42:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000a46:	004a      	lsls	r2, r1, #1
1a000a48:	490d      	ldr	r1, [pc, #52]	; (1a000a80 <Chip_Clock_FindBaseClock+0x48>)
1a000a4a:	5a8a      	ldrh	r2, [r1, r2]
1a000a4c:	42aa      	cmp	r2, r5
1a000a4e:	d807      	bhi.n	1a000a60 <Chip_Clock_FindBaseClock+0x28>
1a000a50:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000a54:	004a      	lsls	r2, r1, #1
1a000a56:	490a      	ldr	r1, [pc, #40]	; (1a000a80 <Chip_Clock_FindBaseClock+0x48>)
1a000a58:	440a      	add	r2, r1
1a000a5a:	8852      	ldrh	r2, [r2, #2]
1a000a5c:	4295      	cmp	r5, r2
1a000a5e:	d901      	bls.n	1a000a64 <Chip_Clock_FindBaseClock+0x2c>
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000a60:	3301      	adds	r3, #1
1a000a62:	e000      	b.n	1a000a66 <Chip_Clock_FindBaseClock+0x2e>
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
1a000a64:	4620      	mov	r0, r4
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000a66:	281c      	cmp	r0, #28
1a000a68:	d107      	bne.n	1a000a7a <Chip_Clock_FindBaseClock+0x42>
1a000a6a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000a6e:	004a      	lsls	r2, r1, #1
1a000a70:	4903      	ldr	r1, [pc, #12]	; (1a000a80 <Chip_Clock_FindBaseClock+0x48>)
1a000a72:	440a      	add	r2, r1
1a000a74:	7914      	ldrb	r4, [r2, #4]
1a000a76:	42a0      	cmp	r0, r4
1a000a78:	d1e3      	bne.n	1a000a42 <Chip_Clock_FindBaseClock+0xa>
			i++;
		}
	}

	return baseclk;
}
1a000a7a:	bc30      	pop	{r4, r5}
1a000a7c:	4770      	bx	lr
1a000a7e:	bf00      	nop
1a000a80:	1a00166c 	.word	0x1a00166c

1a000a84 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000a84:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000a8a:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000a8c:	4a0d      	ldr	r2, [pc, #52]	; (1a000ac4 <Chip_Clock_EnableCrystal+0x40>)
1a000a8e:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000a90:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000a94:	6992      	ldr	r2, [r2, #24]
1a000a96:	4291      	cmp	r1, r2
1a000a98:	d001      	beq.n	1a000a9e <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000a9a:	4a0a      	ldr	r2, [pc, #40]	; (1a000ac4 <Chip_Clock_EnableCrystal+0x40>)
1a000a9c:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000a9e:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000aa2:	4a09      	ldr	r2, [pc, #36]	; (1a000ac8 <Chip_Clock_EnableCrystal+0x44>)
1a000aa4:	6811      	ldr	r1, [r2, #0]
1a000aa6:	4a09      	ldr	r2, [pc, #36]	; (1a000acc <Chip_Clock_EnableCrystal+0x48>)
1a000aa8:	4291      	cmp	r1, r2
1a000aaa:	d901      	bls.n	1a000ab0 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000aac:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000ab0:	4a04      	ldr	r2, [pc, #16]	; (1a000ac4 <Chip_Clock_EnableCrystal+0x40>)
1a000ab2:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000ab4:	9b01      	ldr	r3, [sp, #4]
1a000ab6:	1e5a      	subs	r2, r3, #1
1a000ab8:	9201      	str	r2, [sp, #4]
1a000aba:	2b00      	cmp	r3, #0
1a000abc:	d1fa      	bne.n	1a000ab4 <Chip_Clock_EnableCrystal+0x30>
}
1a000abe:	b002      	add	sp, #8
1a000ac0:	4770      	bx	lr
1a000ac2:	bf00      	nop
1a000ac4:	40050000 	.word	0x40050000
1a000ac8:	1a0015cc 	.word	0x1a0015cc
1a000acc:	01312cff 	.word	0x01312cff

1a000ad0 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000ad0:	3012      	adds	r0, #18
1a000ad2:	4b05      	ldr	r3, [pc, #20]	; (1a000ae8 <Chip_Clock_GetDividerSource+0x18>)
1a000ad4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000ad8:	f010 0f01 	tst.w	r0, #1
1a000adc:	d102      	bne.n	1a000ae4 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000ade:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000ae2:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

	if (reg & 1) {	/* divider is powered down */
		return CLKINPUT_PD;
1a000ae4:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a000ae6:	4770      	bx	lr
1a000ae8:	40050000 	.word	0x40050000

1a000aec <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000aec:	f100 0212 	add.w	r2, r0, #18
1a000af0:	4b03      	ldr	r3, [pc, #12]	; (1a000b00 <Chip_Clock_GetDividerDivisor+0x14>)
1a000af2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000af6:	4b03      	ldr	r3, [pc, #12]	; (1a000b04 <Chip_Clock_GetDividerDivisor+0x18>)
1a000af8:	5c18      	ldrb	r0, [r3, r0]
}
1a000afa:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000afe:	4770      	bx	lr
1a000b00:	40050000 	.word	0x40050000
1a000b04:	1a001664 	.word	0x1a001664

1a000b08 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000b08:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000b0a:	2810      	cmp	r0, #16
1a000b0c:	d80a      	bhi.n	1a000b24 <Chip_Clock_GetClockInputHz+0x1c>
1a000b0e:	e8df f000 	tbb	[pc, r0]
1a000b12:	0b42      	.short	0x0b42
1a000b14:	091f160d 	.word	0x091f160d
1a000b18:	2b282522 	.word	0x2b282522
1a000b1c:	322e0909 	.word	0x322e0909
1a000b20:	3a36      	.short	0x3a36
1a000b22:	3e          	.byte	0x3e
1a000b23:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a000b24:	2000      	movs	r0, #0
1a000b26:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a000b28:	481e      	ldr	r0, [pc, #120]	; (1a000ba4 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000b2a:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000b2c:	4b1e      	ldr	r3, [pc, #120]	; (1a000ba8 <Chip_Clock_GetClockInputHz+0xa0>)
1a000b2e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000b32:	f003 0307 	and.w	r3, r3, #7
1a000b36:	2b04      	cmp	r3, #4
1a000b38:	d130      	bne.n	1a000b9c <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a000b3a:	2000      	movs	r0, #0
1a000b3c:	bd08      	pop	{r3, pc}
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000b3e:	4b1a      	ldr	r3, [pc, #104]	; (1a000ba8 <Chip_Clock_GetClockInputHz+0xa0>)
1a000b40:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000b44:	f003 0307 	and.w	r3, r3, #7
1a000b48:	2b04      	cmp	r3, #4
1a000b4a:	d029      	beq.n	1a000ba0 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000b4c:	4817      	ldr	r0, [pc, #92]	; (1a000bac <Chip_Clock_GetClockInputHz+0xa4>)
1a000b4e:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a000b50:	4b17      	ldr	r3, [pc, #92]	; (1a000bb0 <Chip_Clock_GetClockInputHz+0xa8>)
1a000b52:	6818      	ldr	r0, [r3, #0]
		break;
1a000b54:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a000b56:	4b17      	ldr	r3, [pc, #92]	; (1a000bb4 <Chip_Clock_GetClockInputHz+0xac>)
1a000b58:	6818      	ldr	r0, [r3, #0]
		break;
1a000b5a:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000b5c:	4b16      	ldr	r3, [pc, #88]	; (1a000bb8 <Chip_Clock_GetClockInputHz+0xb0>)
1a000b5e:	6818      	ldr	r0, [r3, #0]
		break;
1a000b60:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000b62:	4b15      	ldr	r3, [pc, #84]	; (1a000bb8 <Chip_Clock_GetClockInputHz+0xb0>)
1a000b64:	6858      	ldr	r0, [r3, #4]
		break;
1a000b66:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a000b68:	f000 f86a 	bl	1a000c40 <Chip_Clock_GetMainPLLHz>
		break;
1a000b6c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000b6e:	2100      	movs	r1, #0
1a000b70:	f000 f89c 	bl	1a000cac <Chip_Clock_GetDivRate>
		break;
1a000b74:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000b76:	2101      	movs	r1, #1
1a000b78:	f000 f898 	bl	1a000cac <Chip_Clock_GetDivRate>
		break;
1a000b7c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000b7e:	2102      	movs	r1, #2
1a000b80:	f000 f894 	bl	1a000cac <Chip_Clock_GetDivRate>
		break;
1a000b84:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000b86:	2103      	movs	r1, #3
1a000b88:	f000 f890 	bl	1a000cac <Chip_Clock_GetDivRate>
		break;
1a000b8c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000b8e:	2104      	movs	r1, #4
1a000b90:	f000 f88c 	bl	1a000cac <Chip_Clock_GetDivRate>
		break;
1a000b94:	bd08      	pop	{r3, pc}
{
	uint32_t rate = 0;

	switch (input) {
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a000b96:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a000b9a:	bd08      	pop	{r3, pc}
		break;

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a000b9c:	4803      	ldr	r0, [pc, #12]	; (1a000bac <Chip_Clock_GetClockInputHz+0xa4>)
1a000b9e:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a000ba0:	4806      	ldr	r0, [pc, #24]	; (1a000bbc <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a000ba2:	bd08      	pop	{r3, pc}
1a000ba4:	00b71b00 	.word	0x00b71b00
1a000ba8:	40043000 	.word	0x40043000
1a000bac:	017d7840 	.word	0x017d7840
1a000bb0:	1a0015d0 	.word	0x1a0015d0
1a000bb4:	1a0015cc 	.word	0x1a0015cc
1a000bb8:	1000003c 	.word	0x1000003c
1a000bbc:	02faf080 	.word	0x02faf080

1a000bc0 <Chip_Clock_CalcMainPLLValue>:
	while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000bc0:	b538      	push	{r3, r4, r5, lr}
1a000bc2:	4605      	mov	r5, r0
1a000bc4:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000bc6:	7908      	ldrb	r0, [r1, #4]
1a000bc8:	f7ff ff9e 	bl	1a000b08 <Chip_Clock_GetClockInputHz>
1a000bcc:	6160      	str	r0, [r4, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000bce:	4b19      	ldr	r3, [pc, #100]	; (1a000c34 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000bd0:	442b      	add	r3, r5
1a000bd2:	4a19      	ldr	r2, [pc, #100]	; (1a000c38 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000bd4:	4293      	cmp	r3, r2
1a000bd6:	d821      	bhi.n	1a000c1c <Chip_Clock_CalcMainPLLValue+0x5c>
1a000bd8:	b318      	cbz	r0, 1a000c22 <Chip_Clock_CalcMainPLLValue+0x62>
		return -1;
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000bda:	2380      	movs	r3, #128	; 0x80
1a000bdc:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a000bde:	2300      	movs	r3, #0
1a000be0:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a000be2:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a000be4:	fbb5 f3f0 	udiv	r3, r5, r0
1a000be8:	6123      	str	r3, [r4, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000bea:	4a14      	ldr	r2, [pc, #80]	; (1a000c3c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000bec:	4295      	cmp	r5, r2
1a000bee:	d903      	bls.n	1a000bf8 <Chip_Clock_CalcMainPLLValue+0x38>
1a000bf0:	fb03 f000 	mul.w	r0, r3, r0
1a000bf4:	4285      	cmp	r5, r0
1a000bf6:	d007      	beq.n	1a000c08 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a000bf8:	4621      	mov	r1, r4
1a000bfa:	4628      	mov	r0, r5
1a000bfc:	f7ff fe9a 	bl	1a000934 <pll_get_frac>
		if (!ppll->nsel) {
1a000c00:	68a3      	ldr	r3, [r4, #8]
1a000c02:	b18b      	cbz	r3, 1a000c28 <Chip_Clock_CalcMainPLLValue+0x68>
			return -1;
		}
		ppll->nsel --;
1a000c04:	3b01      	subs	r3, #1
1a000c06:	60a3      	str	r3, [r4, #8]
	}

	if (ppll->msel == 0) {
1a000c08:	6923      	ldr	r3, [r4, #16]
1a000c0a:	b183      	cbz	r3, 1a000c2e <Chip_Clock_CalcMainPLLValue+0x6e>
		return - 1;
	}

	if (ppll->psel) {
1a000c0c:	68e2      	ldr	r2, [r4, #12]
1a000c0e:	b10a      	cbz	r2, 1a000c14 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a000c10:	3a01      	subs	r2, #1
1a000c12:	60e2      	str	r2, [r4, #12]
	}

	ppll->msel --;
1a000c14:	3b01      	subs	r3, #1
1a000c16:	6123      	str	r3, [r4, #16]

	return 0;
1a000c18:	2000      	movs	r0, #0
1a000c1a:	bd38      	pop	{r3, r4, r5, pc}
{
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
		return -1;
1a000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c20:	bd38      	pop	{r3, r4, r5, pc}
1a000c22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c26:	bd38      	pop	{r3, r4, r5, pc}
	ppll->msel = freq / ppll->fin;

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
		pll_get_frac(freq, ppll);
		if (!ppll->nsel) {
			return -1;
1a000c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c2c:	bd38      	pop	{r3, r4, r5, pc}
		}
		ppll->nsel --;
	}

	if (ppll->msel == 0) {
		return - 1;
1a000c2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	ppll->msel --;

	return 0;
}
1a000c32:	bd38      	pop	{r3, r4, r5, pc}
1a000c34:	ff6b3a10 	.word	0xff6b3a10
1a000c38:	0b940510 	.word	0x0b940510
1a000c3c:	094c5eff 	.word	0x094c5eff

1a000c40 <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a000c40:	b530      	push	{r4, r5, lr}
1a000c42:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000c44:	4d17      	ldr	r5, [pc, #92]	; (1a000ca4 <Chip_Clock_GetMainPLLHz+0x64>)
1a000c46:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000c48:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000c4c:	f7ff ff5c 	bl	1a000b08 <Chip_Clock_GetClockInputHz>
1a000c50:	4601      	mov	r1, r0
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a000c52:	4b15      	ldr	r3, [pc, #84]	; (1a000ca8 <Chip_Clock_GetMainPLLHz+0x68>)
1a000c54:	6818      	ldr	r0, [r3, #0]
1a000c56:	9001      	str	r0, [sp, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000c58:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a000c5a:	f010 0001 	ands.w	r0, r0, #1
1a000c5e:	d01e      	beq.n	1a000c9e <Chip_Clock_GetMainPLLHz+0x5e>
		return 0;
	}

	msel = (PLLReg >> 16) & 0xFF;
1a000c60:	f3c4 4007 	ubfx	r0, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a000c64:	f3c4 3301 	ubfx	r3, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a000c68:	f3c4 2201 	ubfx	r2, r4, #8, #2
	direct = (PLLReg >> 7) & 0x1;
	fbsel = (PLLReg >> 6) & 0x1;
1a000c6c:	f3c4 1580 	ubfx	r5, r4, #6, #1

	m = msel + 1;
1a000c70:	3001      	adds	r0, #1
	n = nsel + 1;
1a000c72:	3301      	adds	r3, #1
	p = ptab[psel];
1a000c74:	f10d 0e08 	add.w	lr, sp, #8
1a000c78:	4472      	add	r2, lr
1a000c7a:	f812 2c04 	ldrb.w	r2, [r2, #-4]

	if (direct || fbsel) {
1a000c7e:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000c82:	d100      	bne.n	1a000c86 <Chip_Clock_GetMainPLLHz+0x46>
1a000c84:	b125      	cbz	r5, 1a000c90 <Chip_Clock_GetMainPLLHz+0x50>
		return m * (freq / n);
1a000c86:	fbb1 f3f3 	udiv	r3, r1, r3
1a000c8a:	fb03 f000 	mul.w	r0, r3, r0
1a000c8e:	e006      	b.n	1a000c9e <Chip_Clock_GetMainPLLHz+0x5e>
	}

	return (m / (2 * p)) * (freq / n);
1a000c90:	0052      	lsls	r2, r2, #1
1a000c92:	fbb0 f0f2 	udiv	r0, r0, r2
1a000c96:	fbb1 f3f3 	udiv	r3, r1, r3
1a000c9a:	fb03 f000 	mul.w	r0, r3, r0
}
1a000c9e:	b003      	add	sp, #12
1a000ca0:	bd30      	pop	{r4, r5, pc}
1a000ca2:	bf00      	nop
1a000ca4:	40050000 	.word	0x40050000
1a000ca8:	1a001660 	.word	0x1a001660

1a000cac <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a000cac:	b538      	push	{r3, r4, r5, lr}
1a000cae:	460c      	mov	r4, r1
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a000cb0:	4608      	mov	r0, r1
1a000cb2:	f7ff ff0d 	bl	1a000ad0 <Chip_Clock_GetDividerSource>
1a000cb6:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a000cb8:	4620      	mov	r0, r4
1a000cba:	f7ff ff17 	bl	1a000aec <Chip_Clock_GetDividerDivisor>
1a000cbe:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000cc0:	4628      	mov	r0, r5
1a000cc2:	f7ff ff21 	bl	1a000b08 <Chip_Clock_GetClockInputHz>
1a000cc6:	3401      	adds	r4, #1
}
1a000cc8:	fbb0 f0f4 	udiv	r0, r0, r4
1a000ccc:	bd38      	pop	{r3, r4, r5, pc}
1a000cce:	bf00      	nop

1a000cd0 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000cd0:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000cd2:	f100 0416 	add.w	r4, r0, #22
1a000cd6:	00a4      	lsls	r4, r4, #2
1a000cd8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a000cdc:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a000ce0:	6865      	ldr	r5, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a000ce2:	281b      	cmp	r0, #27
1a000ce4:	d813      	bhi.n	1a000d0e <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a000ce6:	2911      	cmp	r1, #17
1a000ce8:	d01a      	beq.n	1a000d20 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000cea:	4c0e      	ldr	r4, [pc, #56]	; (1a000d24 <Chip_Clock_SetBaseClock+0x54>)
1a000cec:	402c      	ands	r4, r5

			if (autoblocken) {
1a000cee:	b10a      	cbz	r2, 1a000cf4 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a000cf0:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a000cf4:	b10b      	cbz	r3, 1a000cfa <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a000cf6:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a000cfa:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000cfe:	3016      	adds	r0, #22
1a000d00:	0080      	lsls	r0, r0, #2
1a000d02:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000d06:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000d0a:	6044      	str	r4, [r0, #4]
1a000d0c:	e008      	b.n	1a000d20 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a000d0e:	f045 0501 	orr.w	r5, r5, #1
1a000d12:	3016      	adds	r0, #22
1a000d14:	0080      	lsls	r0, r0, #2
1a000d16:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000d1a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000d1e:	6045      	str	r5, [r0, #4]
	}
}
1a000d20:	bc30      	pop	{r4, r5}
1a000d22:	4770      	bx	lr
1a000d24:	e0fff7fe 	.word	0xe0fff7fe

1a000d28 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a000d28:	281b      	cmp	r0, #27
1a000d2a:	d80c      	bhi.n	1a000d46 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a000d2c:	3016      	adds	r0, #22
1a000d2e:	0080      	lsls	r0, r0, #2
1a000d30:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000d34:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000d38:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a000d3a:	f010 0f01 	tst.w	r0, #1
1a000d3e:	d104      	bne.n	1a000d4a <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000d40:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000d44:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
		return CLKINPUT_PD;
1a000d46:	2011      	movs	r0, #17
1a000d48:	4770      	bx	lr

	reg = LPC_CGU->BASE_CLK[BaseClock];

	/* base clock is powered down? */
	if (reg & 1) {
		return CLKINPUT_PD;
1a000d4a:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a000d4c:	4770      	bx	lr
1a000d4e:	bf00      	nop

1a000d50 <Chip_Clock_GetBaseClocktHz>:
	return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a000d50:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000d52:	f7ff ffe9 	bl	1a000d28 <Chip_Clock_GetBaseClock>
1a000d56:	f7ff fed7 	bl	1a000b08 <Chip_Clock_GetClockInputHz>
}
1a000d5a:	bd08      	pop	{r3, pc}

1a000d5c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a000d5c:	b909      	cbnz	r1, 1a000d62 <Chip_Clock_EnableOpts+0x6>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;
1a000d5e:	2101      	movs	r1, #1
1a000d60:	e000      	b.n	1a000d64 <Chip_Clock_EnableOpts+0x8>

	if (autoen) {
		reg |= (1 << 1);
1a000d62:	2103      	movs	r1, #3
	}
	if (wakeupen) {
1a000d64:	b10a      	cbz	r2, 1a000d6a <Chip_Clock_EnableOpts+0xe>
		reg |= (1 << 2);
1a000d66:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a000d6a:	2b02      	cmp	r3, #2
1a000d6c:	d101      	bne.n	1a000d72 <Chip_Clock_EnableOpts+0x16>
		reg |= (1 << 5);
1a000d6e:	f041 0120 	orr.w	r1, r1, #32
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a000d72:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000d76:	d305      	bcc.n	1a000d84 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000d78:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000d7c:	4b04      	ldr	r3, [pc, #16]	; (1a000d90 <Chip_Clock_EnableOpts+0x34>)
1a000d7e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000d82:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000d84:	3020      	adds	r0, #32
1a000d86:	4b03      	ldr	r3, [pc, #12]	; (1a000d94 <Chip_Clock_EnableOpts+0x38>)
1a000d88:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000d8c:	4770      	bx	lr
1a000d8e:	bf00      	nop
1a000d90:	40052000 	.word	0x40052000
1a000d94:	40051000 	.word	0x40051000

1a000d98 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a000d98:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000d9c:	d309      	bcc.n	1a000db2 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a000d9e:	4a09      	ldr	r2, [pc, #36]	; (1a000dc4 <Chip_Clock_Enable+0x2c>)
1a000da0:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000da4:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000da8:	f043 0301 	orr.w	r3, r3, #1
1a000dac:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a000db0:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a000db2:	4a05      	ldr	r2, [pc, #20]	; (1a000dc8 <Chip_Clock_Enable+0x30>)
1a000db4:	3020      	adds	r0, #32
1a000db6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000dba:	f043 0301 	orr.w	r3, r3, #1
1a000dbe:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a000dc2:	4770      	bx	lr
1a000dc4:	40052000 	.word	0x40052000
1a000dc8:	40051000 	.word	0x40051000

1a000dcc <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a000dcc:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a000dce:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000dd2:	d305      	bcc.n	1a000de0 <Chip_Clock_GetRate+0x14>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a000dd4:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a000dd8:	4a0d      	ldr	r2, [pc, #52]	; (1a000e10 <Chip_Clock_GetRate+0x44>)
1a000dda:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a000dde:	e004      	b.n	1a000dea <Chip_Clock_GetRate+0x1e>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a000de0:	f100 0320 	add.w	r3, r0, #32
1a000de4:	4a0b      	ldr	r2, [pc, #44]	; (1a000e14 <Chip_Clock_GetRate+0x48>)
1a000de6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a000dea:	f014 0f01 	tst.w	r4, #1
1a000dee:	d00c      	beq.n	1a000e0a <Chip_Clock_GetRate+0x3e>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a000df0:	f7ff fe22 	bl	1a000a38 <Chip_Clock_FindBaseClock>

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a000df4:	f7ff ffac 	bl	1a000d50 <Chip_Clock_GetBaseClocktHz>

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a000df8:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a000dfc:	d101      	bne.n	1a000e02 <Chip_Clock_GetRate+0x36>
			div = 1;
1a000dfe:	2301      	movs	r3, #1
1a000e00:	e000      	b.n	1a000e04 <Chip_Clock_GetRate+0x38>
		}
		else {
			div = 2;/* No other dividers supported */
1a000e02:	2302      	movs	r3, #2

		}
		rate = rate / div;
1a000e04:	fbb0 f0f3 	udiv	r0, r0, r3
1a000e08:	bd10      	pop	{r4, pc}
	}
	else {
		rate = 0;
1a000e0a:	2000      	movs	r0, #0
	}

	return rate;
}
1a000e0c:	bd10      	pop	{r4, pc}
1a000e0e:	bf00      	nop
1a000e10:	40052000 	.word	0x40052000
1a000e14:	40051000 	.word	0x40051000

1a000e18 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a000e18:	4770      	bx	lr
1a000e1a:	bf00      	nop

1a000e1c <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000e1c:	2901      	cmp	r1, #1
1a000e1e:	d109      	bne.n	1a000e34 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a000e20:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000e24:	0083      	lsls	r3, r0, #2
1a000e26:	4a04      	ldr	r2, [pc, #16]	; (1a000e38 <Chip_I2C_EventHandler+0x1c>)
1a000e28:	4413      	add	r3, r2
1a000e2a:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000e2c:	7d13      	ldrb	r3, [r2, #20]
1a000e2e:	b2db      	uxtb	r3, r3
1a000e30:	2b04      	cmp	r3, #4
1a000e32:	d0fb      	beq.n	1a000e2c <Chip_I2C_EventHandler+0x10>
1a000e34:	4770      	bx	lr
1a000e36:	bf00      	nop
1a000e38:	10000000 	.word	0x10000000

1a000e3c <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000e3c:	b570      	push	{r4, r5, r6, lr}
1a000e3e:	4605      	mov	r5, r0
 * Private functions
 ****************************************************************************/

STATIC INLINE void enableClk(I2C_ID_T id)
{
	Chip_Clock_Enable(i2c[id].clk);
1a000e40:	4e06      	ldr	r6, [pc, #24]	; (1a000e5c <Chip_I2C_Init+0x20>)
1a000e42:	00c4      	lsls	r4, r0, #3
1a000e44:	1a22      	subs	r2, r4, r0
1a000e46:	0093      	lsls	r3, r2, #2
1a000e48:	4433      	add	r3, r6
1a000e4a:	8898      	ldrh	r0, [r3, #4]
1a000e4c:	f7ff ffa4 	bl	1a000d98 <Chip_Clock_Enable>
void Chip_I2C_Init(I2C_ID_T id)
{
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000e50:	1b64      	subs	r4, r4, r5
1a000e52:	00a3      	lsls	r3, r4, #2
1a000e54:	58f3      	ldr	r3, [r6, r3]
1a000e56:	226c      	movs	r2, #108	; 0x6c
1a000e58:	619a      	str	r2, [r3, #24]
1a000e5a:	bd70      	pop	{r4, r5, r6, pc}
1a000e5c:	10000000 	.word	0x10000000

1a000e60 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000e64:	460c      	mov	r4, r1
}

/* Get the ADC Clock Rate */
STATIC INLINE uint32_t getClkRate(I2C_ID_T id)
{
	return Chip_Clock_GetRate(i2c[id].clk);
1a000e66:	4e0b      	ldr	r6, [pc, #44]	; (1a000e94 <Chip_I2C_SetClockRate+0x34>)
1a000e68:	00c5      	lsls	r5, r0, #3
1a000e6a:	1a2b      	subs	r3, r5, r0
1a000e6c:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a000e70:	eb06 0308 	add.w	r3, r6, r8
1a000e74:	8898      	ldrh	r0, [r3, #4]
1a000e76:	f7ff ffa9 	bl	1a000dcc <Chip_Clock_GetRate>
/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a000e7a:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000e7e:	f856 3008 	ldr.w	r3, [r6, r8]
1a000e82:	0842      	lsrs	r2, r0, #1
1a000e84:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000e86:	f856 3008 	ldr.w	r3, [r6, r8]
1a000e8a:	691a      	ldr	r2, [r3, #16]
1a000e8c:	1a80      	subs	r0, r0, r2
1a000e8e:	6158      	str	r0, [r3, #20]
1a000e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000e94:	10000000 	.word	0x10000000

1a000e98 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000e98:	4b03      	ldr	r3, [pc, #12]	; (1a000ea8 <Chip_SSP_GetClockIndex+0x10>)
1a000e9a:	4298      	cmp	r0, r3
1a000e9c:	d101      	bne.n	1a000ea2 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
1a000e9e:	20a5      	movs	r0, #165	; 0xa5
1a000ea0:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a000ea2:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a000ea4:	4770      	bx	lr
1a000ea6:	bf00      	nop
1a000ea8:	400c5000 	.word	0x400c5000

1a000eac <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000eac:	4b04      	ldr	r3, [pc, #16]	; (1a000ec0 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a000eae:	4298      	cmp	r0, r3
1a000eb0:	d102      	bne.n	1a000eb8 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
1a000eb2:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a000eb6:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a000eb8:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a000ebc:	4770      	bx	lr
1a000ebe:	bf00      	nop
1a000ec0:	400c5000 	.word	0x400c5000

1a000ec4 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a000ec4:	6803      	ldr	r3, [r0, #0]
1a000ec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a000eca:	0209      	lsls	r1, r1, #8
1a000ecc:	b289      	uxth	r1, r1
1a000ece:	4319      	orrs	r1, r3
1a000ed0:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a000ed2:	6102      	str	r2, [r0, #16]
1a000ed4:	4770      	bx	lr
1a000ed6:	bf00      	nop

1a000ed8 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a000ed8:	b570      	push	{r4, r5, r6, lr}
1a000eda:	4606      	mov	r6, r0
1a000edc:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a000ede:	f7ff ffe5 	bl	1a000eac <Chip_SSP_GetPeriphClockIndex>
1a000ee2:	f7ff ff73 	bl	1a000dcc <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a000ee6:	2202      	movs	r2, #2
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
1a000ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
1a000eec:	2100      	movs	r1, #0
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a000eee:	e00c      	b.n	1a000f0a <Chip_SSP_SetBitRate+0x32>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a000ef0:	1c4c      	adds	r4, r1, #1
1a000ef2:	fb04 f302 	mul.w	r3, r4, r2
1a000ef6:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a000efa:	429d      	cmp	r5, r3
1a000efc:	d205      	bcs.n	1a000f0a <Chip_SSP_SetBitRate+0x32>
			cr0_div++;
			if (cr0_div > 0xFF) {
1a000efe:	2cff      	cmp	r4, #255	; 0xff
1a000f00:	d902      	bls.n	1a000f08 <Chip_SSP_SetBitRate+0x30>
				cr0_div = 0;
				prescale += 2;
1a000f02:	3202      	adds	r2, #2
	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
			if (cr0_div > 0xFF) {
				cr0_div = 0;
1a000f04:	2100      	movs	r1, #0
1a000f06:	e000      	b.n	1a000f0a <Chip_SSP_SetBitRate+0x32>
	prescale = 2;

	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a000f08:	4621      	mov	r1, r4

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a000f0a:	42ab      	cmp	r3, r5
1a000f0c:	d8f0      	bhi.n	1a000ef0 <Chip_SSP_SetBitRate+0x18>
				prescale += 2;
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a000f0e:	4630      	mov	r0, r6
1a000f10:	f7ff ffd8 	bl	1a000ec4 <Chip_SSP_SetClockRate>
1a000f14:	bd70      	pop	{r4, r5, r6, pc}
1a000f16:	bf00      	nop

1a000f18 <Chip_SSP_Init>:
}

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a000f18:	b510      	push	{r4, lr}
1a000f1a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a000f1c:	f7ff ffbc 	bl	1a000e98 <Chip_SSP_GetClockIndex>
1a000f20:	f7ff ff3a 	bl	1a000d98 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a000f24:	4620      	mov	r0, r4
1a000f26:	f7ff ffc1 	bl	1a000eac <Chip_SSP_GetPeriphClockIndex>
1a000f2a:	f7ff ff35 	bl	1a000d98 <Chip_Clock_Enable>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000f2e:	6863      	ldr	r3, [r4, #4]
1a000f30:	f023 0304 	bic.w	r3, r3, #4
1a000f34:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000f36:	6823      	ldr	r3, [r4, #0]
1a000f38:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000f3c:	f043 0307 	orr.w	r3, r3, #7
1a000f40:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a000f42:	4902      	ldr	r1, [pc, #8]	; (1a000f4c <Chip_SSP_Init+0x34>)
1a000f44:	4620      	mov	r0, r4
1a000f46:	f7ff ffc7 	bl	1a000ed8 <Chip_SSP_SetBitRate>
1a000f4a:	bd10      	pop	{r4, pc}
1a000f4c:	000186a0 	.word	0x000186a0

1a000f50 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000f50:	b570      	push	{r4, r5, r6, lr}
1a000f52:	b08a      	sub	sp, #40	; 0x28
1a000f54:	4605      	mov	r5, r0
1a000f56:	460e      	mov	r6, r1
1a000f58:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a000f5a:	f242 7310 	movw	r3, #10000	; 0x2710
1a000f5e:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a000f60:	2806      	cmp	r0, #6
1a000f62:	d101      	bne.n	1a000f68 <Chip_SetupCoreClock+0x18>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a000f64:	f7ff fd8e 	bl	1a000a84 <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000f68:	2300      	movs	r3, #0
1a000f6a:	2201      	movs	r2, #1
1a000f6c:	4629      	mov	r1, r5
1a000f6e:	2004      	movs	r0, #4
1a000f70:	f7ff feae 	bl	1a000cd0 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a000f74:	4a47      	ldr	r2, [pc, #284]	; (1a001094 <Chip_SetupCoreClock+0x144>)
1a000f76:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000f78:	f043 0301 	orr.w	r3, r3, #1
1a000f7c:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a000f7e:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000f82:	a901      	add	r1, sp, #4
1a000f84:	4630      	mov	r0, r6
1a000f86:	f7ff fe1b 	bl	1a000bc0 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a000f8a:	4b43      	ldr	r3, [pc, #268]	; (1a001098 <Chip_SetupCoreClock+0x148>)
1a000f8c:	429e      	cmp	r6, r3
1a000f8e:	d913      	bls.n	1a000fb8 <Chip_SetupCoreClock+0x68>
		if (ppll.ctrl & (1 << 6)) {
1a000f90:	9b01      	ldr	r3, [sp, #4]
1a000f92:	f013 0f40 	tst.w	r3, #64	; 0x40
1a000f96:	d000      	beq.n	1a000f9a <Chip_SetupCoreClock+0x4a>
1a000f98:	e7fe      	b.n	1a000f98 <Chip_SetupCoreClock+0x48>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a000f9a:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000f9e:	d005      	beq.n	1a000fac <Chip_SetupCoreClock+0x5c>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a000fa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000fa4:	9301      	str	r3, [sp, #4]
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a000fa6:	2500      	movs	r5, #0

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
1a000fa8:	2601      	movs	r6, #1
1a000faa:	e007      	b.n	1a000fbc <Chip_SetupCoreClock+0x6c>
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
			ppll.psel++;
1a000fac:	9b04      	ldr	r3, [sp, #16]
1a000fae:	3301      	adds	r3, #1
1a000fb0:	9304      	str	r3, [sp, #16]
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
1a000fb2:	2501      	movs	r5, #1
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a000fb4:	2600      	movs	r6, #0
1a000fb6:	e001      	b.n	1a000fbc <Chip_SetupCoreClock+0x6c>
1a000fb8:	2500      	movs	r5, #0
1a000fba:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000fbc:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000fc0:	9b01      	ldr	r3, [sp, #4]
1a000fc2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000fc6:	9a05      	ldr	r2, [sp, #20]
1a000fc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000fcc:	9a03      	ldr	r2, [sp, #12]
1a000fce:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000fd2:	9a04      	ldr	r2, [sp, #16]
1a000fd4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000fd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000fdc:	4a2d      	ldr	r2, [pc, #180]	; (1a001094 <Chip_SetupCoreClock+0x144>)
1a000fde:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000fe0:	4b2c      	ldr	r3, [pc, #176]	; (1a001094 <Chip_SetupCoreClock+0x144>)
1a000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a000fe4:	f013 0f01 	tst.w	r3, #1
1a000fe8:	d0fa      	beq.n	1a000fe0 <Chip_SetupCoreClock+0x90>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000fea:	2300      	movs	r3, #0
1a000fec:	2201      	movs	r2, #1
1a000fee:	2109      	movs	r1, #9
1a000ff0:	2004      	movs	r0, #4
1a000ff2:	f7ff fe6d 	bl	1a000cd0 <Chip_Clock_SetBaseClock>

	if (direct) {
1a000ff6:	b1ee      	cbz	r6, 1a001034 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000ff8:	f242 7310 	movw	r3, #10000	; 0x2710
1a000ffc:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a000ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001000:	1e5a      	subs	r2, r3, #1
1a001002:	9209      	str	r2, [sp, #36]	; 0x24
1a001004:	2b00      	cmp	r3, #0
1a001006:	d1fa      	bne.n	1a000ffe <Chip_SetupCoreClock+0xae>
		ppll.ctrl |= 1 << 7;
1a001008:	9b01      	ldr	r3, [sp, #4]
1a00100a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00100e:	9301      	str	r3, [sp, #4]
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001010:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001014:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001018:	9a05      	ldr	r2, [sp, #20]
1a00101a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00101e:	9a03      	ldr	r2, [sp, #12]
1a001020:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001024:	9a04      	ldr	r2, [sp, #16]
1a001026:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00102a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00102e:	4a19      	ldr	r2, [pc, #100]	; (1a001094 <Chip_SetupCoreClock+0x144>)
1a001030:	6453      	str	r3, [r2, #68]	; 0x44
1a001032:	e01c      	b.n	1a00106e <Chip_SetupCoreClock+0x11e>
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
	} else if (pdivide) {
1a001034:	b1dd      	cbz	r5, 1a00106e <Chip_SetupCoreClock+0x11e>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001036:	f242 7310 	movw	r3, #10000	; 0x2710
1a00103a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a00103c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00103e:	1e5a      	subs	r2, r3, #1
1a001040:	9209      	str	r2, [sp, #36]	; 0x24
1a001042:	2b00      	cmp	r3, #0
1a001044:	d1fa      	bne.n	1a00103c <Chip_SetupCoreClock+0xec>
		ppll.psel--;
1a001046:	9b04      	ldr	r3, [sp, #16]
1a001048:	1e59      	subs	r1, r3, #1
1a00104a:	9104      	str	r1, [sp, #16]
1a00104c:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001050:	9b01      	ldr	r3, [sp, #4]
1a001052:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
1a001056:	9b05      	ldr	r3, [sp, #20]
1a001058:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a00105c:	9b03      	ldr	r3, [sp, #12]
1a00105e:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
1a001062:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
1a001066:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00106a:	4a0a      	ldr	r2, [pc, #40]	; (1a001094 <Chip_SetupCoreClock+0x144>)
1a00106c:	6453      	str	r3, [r2, #68]	; 0x44
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a00106e:	b964      	cbnz	r4, 1a00108a <Chip_SetupCoreClock+0x13a>
1a001070:	e00e      	b.n	1a001090 <Chip_SetupCoreClock+0x140>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001072:	480a      	ldr	r0, [pc, #40]	; (1a00109c <Chip_SetupCoreClock+0x14c>)
1a001074:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001078:	78cb      	ldrb	r3, [r1, #3]
1a00107a:	788a      	ldrb	r2, [r1, #2]
1a00107c:	7849      	ldrb	r1, [r1, #1]
1a00107e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001082:	f7ff fe25 	bl	1a000cd0 <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001086:	3401      	adds	r4, #1
1a001088:	e000      	b.n	1a00108c <Chip_SetupCoreClock+0x13c>
1a00108a:	2400      	movs	r4, #0
1a00108c:	2c11      	cmp	r4, #17
1a00108e:	d9f0      	bls.n	1a001072 <Chip_SetupCoreClock+0x122>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001090:	b00a      	add	sp, #40	; 0x28
1a001092:	bd70      	pop	{r4, r5, r6, pc}
1a001094:	40050000 	.word	0x40050000
1a001098:	068e7780 	.word	0x068e7780
1a00109c:	1a0016d8 	.word	0x1a0016d8

1a0010a0 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0010a0:	4b09      	ldr	r3, [pc, #36]	; (1a0010c8 <Chip_UART_GetIndex+0x28>)
1a0010a2:	4298      	cmp	r0, r3
1a0010a4:	d009      	beq.n	1a0010ba <Chip_UART_GetIndex+0x1a>
1a0010a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0010aa:	4298      	cmp	r0, r3
1a0010ac:	d007      	beq.n	1a0010be <Chip_UART_GetIndex+0x1e>
1a0010ae:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0010b2:	4298      	cmp	r0, r3
1a0010b4:	d005      	beq.n	1a0010c2 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0010b6:	2000      	movs	r0, #0
1a0010b8:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0010ba:	2002      	movs	r0, #2
1a0010bc:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0010be:	2003      	movs	r0, #3
1a0010c0:	4770      	bx	lr
	uint32_t base = (uint32_t) pUART;
	switch(base) {
		case LPC_USART0_BASE:
			return 0;
		case LPC_UART1_BASE:
			return 1;
1a0010c2:	2001      	movs	r0, #1
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a0010c4:	4770      	bx	lr
1a0010c6:	bf00      	nop
1a0010c8:	400c1000 	.word	0x400c1000

1a0010cc <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0010cc:	b530      	push	{r4, r5, lr}
1a0010ce:	b083      	sub	sp, #12
1a0010d0:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0010d2:	f7ff ffe5 	bl	1a0010a0 <Chip_UART_GetIndex>
1a0010d6:	2301      	movs	r3, #1
1a0010d8:	461a      	mov	r2, r3
1a0010da:	4619      	mov	r1, r3
1a0010dc:	4d0e      	ldr	r5, [pc, #56]	; (1a001118 <Chip_UART_Init+0x4c>)
1a0010de:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0010e2:	f7ff fe3b 	bl	1a000d5c <Chip_Clock_EnableOpts>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a0010e6:	2307      	movs	r3, #7
1a0010e8:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a0010ea:	2300      	movs	r3, #0
1a0010ec:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0010ee:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0010f0:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0010f2:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0010f4:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0010f6:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0010f8:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0010fa:	4b08      	ldr	r3, [pc, #32]	; (1a00111c <Chip_UART_Init+0x50>)
1a0010fc:	429c      	cmp	r4, r3
1a0010fe:	d103      	bne.n	1a001108 <Chip_UART_Init+0x3c>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a001100:	2300      	movs	r3, #0
1a001102:	6123      	str	r3, [r4, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a001104:	69a3      	ldr	r3, [r4, #24]
1a001106:	9301      	str	r3, [sp, #4]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a001108:	2303      	movs	r3, #3
1a00110a:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a00110c:	2310      	movs	r3, #16
1a00110e:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a001110:	9b01      	ldr	r3, [sp, #4]
}
1a001112:	b003      	add	sp, #12
1a001114:	bd30      	pop	{r4, r5, pc}
1a001116:	bf00      	nop
1a001118:	1a001728 	.word	0x1a001728
1a00111c:	40082000 	.word	0x40082000

1a001120 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001124:	b083      	sub	sp, #12
1a001126:	4683      	mov	fp, r0
1a001128:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00112a:	f7ff ffb9 	bl	1a0010a0 <Chip_UART_GetIndex>
1a00112e:	4b34      	ldr	r3, [pc, #208]	; (1a001200 <Chip_UART_SetBaudFDR+0xe0>)
1a001130:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001134:	f7ff fe4a 	bl	1a000dcc <Chip_Clock_GetRate>
1a001138:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a00113a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00113e:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a001140:	2300      	movs	r3, #0
1a001142:	9301      	str	r3, [sp, #4]
1a001144:	46a2      	mov	sl, r4
1a001146:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001148:	e029      	b.n	1a00119e <Chip_UART_SetBaudFDR+0x7e>
		for (d = 0; d < m; d++) {
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a00114a:	2300      	movs	r3, #0
1a00114c:	0932      	lsrs	r2, r6, #4
1a00114e:	0730      	lsls	r0, r6, #28
1a001150:	fba4 0100 	umull	r0, r1, r4, r0
1a001154:	fb04 1102 	mla	r1, r4, r2, r1
1a001158:	1962      	adds	r2, r4, r5
1a00115a:	fb08 f202 	mul.w	r2, r8, r2
1a00115e:	f000 f871 	bl	1a001244 <__aeabi_uldivmod>

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a001162:	4603      	mov	r3, r0
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a001164:	460a      	mov	r2, r1

			/* Closer to next div */
			if ((int)diff < 0) {
1a001166:	2800      	cmp	r0, #0
1a001168:	da01      	bge.n	1a00116e <Chip_UART_SetBaudFDR+0x4e>
				diff = -diff;
1a00116a:	4243      	negs	r3, r0
				div ++;
1a00116c:	1c4a      	adds	r2, r1, #1
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a00116e:	429f      	cmp	r7, r3
1a001170:	d30a      	bcc.n	1a001188 <Chip_UART_SetBaudFDR+0x68>
1a001172:	b14a      	cbz	r2, 1a001188 <Chip_UART_SetBaudFDR+0x68>
1a001174:	0c11      	lsrs	r1, r2, #16
1a001176:	d107      	bne.n	1a001188 <Chip_UART_SetBaudFDR+0x68>
1a001178:	2a02      	cmp	r2, #2
1a00117a:	d800      	bhi.n	1a00117e <Chip_UART_SetBaudFDR+0x5e>
1a00117c:	b925      	cbnz	r5, 1a001188 <Chip_UART_SetBaudFDR+0x68>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a00117e:	b14b      	cbz	r3, 1a001194 <Chip_UART_SetBaudFDR+0x74>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a001180:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a001182:	9501      	str	r5, [sp, #4]
			sm = m;
1a001184:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a001186:	4691      	mov	r9, r2
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a001188:	3501      	adds	r5, #1
1a00118a:	e000      	b.n	1a00118e <Chip_UART_SetBaudFDR+0x6e>
1a00118c:	2500      	movs	r5, #0
1a00118e:	42ac      	cmp	r4, r5
1a001190:	d8db      	bhi.n	1a00114a <Chip_UART_SetBaudFDR+0x2a>
1a001192:	e003      	b.n	1a00119c <Chip_UART_SetBaudFDR+0x7c>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a001194:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a001196:	9501      	str	r5, [sp, #4]
			sm = m;
1a001198:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a00119a:	4691      	mov	r9, r2

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00119c:	3401      	adds	r4, #1
1a00119e:	b10f      	cbz	r7, 1a0011a4 <Chip_UART_SetBaudFDR+0x84>
1a0011a0:	2c0f      	cmp	r4, #15
1a0011a2:	d9f3      	bls.n	1a00118c <Chip_UART_SetBaudFDR+0x6c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0011a4:	f1b9 0f00 	cmp.w	r9, #0
1a0011a8:	d026      	beq.n	1a0011f8 <Chip_UART_SetBaudFDR+0xd8>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0011aa:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0011ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0011b2:	f8cb 300c 	str.w	r3, [fp, #12]
1a0011b6:	fa5f f389 	uxtb.w	r3, r9
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a0011ba:	f8cb 3000 	str.w	r3, [fp]
1a0011be:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0011c2:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0011c6:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0011ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0011ce:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0011d2:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0011d6:	b2da      	uxtb	r2, r3
1a0011d8:	9901      	ldr	r1, [sp, #4]
1a0011da:	f001 030f 	and.w	r3, r1, #15
1a0011de:	4313      	orrs	r3, r2
1a0011e0:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0011e4:	0933      	lsrs	r3, r6, #4
1a0011e6:	fb03 f30a 	mul.w	r3, r3, sl
1a0011ea:	eb0a 0001 	add.w	r0, sl, r1
1a0011ee:	fb00 f009 	mul.w	r0, r0, r9
1a0011f2:	fbb3 f0f0 	udiv	r0, r3, r0
1a0011f6:	e000      	b.n	1a0011fa <Chip_UART_SetBaudFDR+0xda>
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
		return 0;
1a0011f8:	2000      	movs	r0, #0
	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
}
1a0011fa:	b003      	add	sp, #12
1a0011fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001200:	1a001720 	.word	0x1a001720

1a001204 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001204:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a001206:	4b0d      	ldr	r3, [pc, #52]	; (1a00123c <SystemInit+0x38>)
1a001208:	4a0d      	ldr	r2, [pc, #52]	; (1a001240 <SystemInit+0x3c>)
1a00120a:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a00120c:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001210:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a001212:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a001216:	2b20      	cmp	r3, #32
1a001218:	d101      	bne.n	1a00121e <SystemInit+0x1a>
  {
    return 1U;           /* Single precision FPU */
1a00121a:	2301      	movs	r3, #1
1a00121c:	e000      	b.n	1a001220 <SystemInit+0x1c>
  }
  else
  {
    return 0U;           /* No FPU */
1a00121e:	2300      	movs	r3, #0

   if (SCB_GetFPUType() > 0)
1a001220:	b133      	cbz	r3, 1a001230 <SystemInit+0x2c>
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a001222:	4a06      	ldr	r2, [pc, #24]	; (1a00123c <SystemInit+0x38>)
1a001224:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a001228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00122c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

   /* Board specific SystemInit */
   Board_SystemInit();
1a001230:	f7ff fab8 	bl	1a0007a4 <Board_SystemInit>
   Board_Init();
1a001234:	f7ff fa4c 	bl	1a0006d0 <Board_Init>
1a001238:	bd08      	pop	{r3, pc}
1a00123a:	bf00      	nop
1a00123c:	e000ed00 	.word	0xe000ed00
1a001240:	1a000000 	.word	0x1a000000

1a001244 <__aeabi_uldivmod>:
1a001244:	b953      	cbnz	r3, 1a00125c <__aeabi_uldivmod+0x18>
1a001246:	b94a      	cbnz	r2, 1a00125c <__aeabi_uldivmod+0x18>
1a001248:	2900      	cmp	r1, #0
1a00124a:	bf08      	it	eq
1a00124c:	2800      	cmpeq	r0, #0
1a00124e:	bf1c      	itt	ne
1a001250:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a001254:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a001258:	f000 b97e 	b.w	1a001558 <__aeabi_idiv0>
1a00125c:	f1ad 0c08 	sub.w	ip, sp, #8
1a001260:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001264:	f000 f806 	bl	1a001274 <__udivmoddi4>
1a001268:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00126c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001270:	b004      	add	sp, #16
1a001272:	4770      	bx	lr

1a001274 <__udivmoddi4>:
1a001274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001278:	468c      	mov	ip, r1
1a00127a:	460e      	mov	r6, r1
1a00127c:	4604      	mov	r4, r0
1a00127e:	9d08      	ldr	r5, [sp, #32]
1a001280:	2b00      	cmp	r3, #0
1a001282:	d150      	bne.n	1a001326 <__udivmoddi4+0xb2>
1a001284:	428a      	cmp	r2, r1
1a001286:	4617      	mov	r7, r2
1a001288:	d96c      	bls.n	1a001364 <__udivmoddi4+0xf0>
1a00128a:	fab2 fe82 	clz	lr, r2
1a00128e:	f1be 0f00 	cmp.w	lr, #0
1a001292:	d00b      	beq.n	1a0012ac <__udivmoddi4+0x38>
1a001294:	f1ce 0420 	rsb	r4, lr, #32
1a001298:	fa20 f404 	lsr.w	r4, r0, r4
1a00129c:	fa01 f60e 	lsl.w	r6, r1, lr
1a0012a0:	ea44 0c06 	orr.w	ip, r4, r6
1a0012a4:	fa02 f70e 	lsl.w	r7, r2, lr
1a0012a8:	fa00 f40e 	lsl.w	r4, r0, lr
1a0012ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
1a0012b0:	0c22      	lsrs	r2, r4, #16
1a0012b2:	fbbc f0f9 	udiv	r0, ip, r9
1a0012b6:	fa1f f887 	uxth.w	r8, r7
1a0012ba:	fb09 c610 	mls	r6, r9, r0, ip
1a0012be:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
1a0012c2:	fb00 f308 	mul.w	r3, r0, r8
1a0012c6:	42b3      	cmp	r3, r6
1a0012c8:	d909      	bls.n	1a0012de <__udivmoddi4+0x6a>
1a0012ca:	19f6      	adds	r6, r6, r7
1a0012cc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
1a0012d0:	f080 8122 	bcs.w	1a001518 <__udivmoddi4+0x2a4>
1a0012d4:	42b3      	cmp	r3, r6
1a0012d6:	f240 811f 	bls.w	1a001518 <__udivmoddi4+0x2a4>
1a0012da:	3802      	subs	r0, #2
1a0012dc:	443e      	add	r6, r7
1a0012de:	1af6      	subs	r6, r6, r3
1a0012e0:	b2a2      	uxth	r2, r4
1a0012e2:	fbb6 f3f9 	udiv	r3, r6, r9
1a0012e6:	fb09 6613 	mls	r6, r9, r3, r6
1a0012ea:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
1a0012ee:	fb03 f808 	mul.w	r8, r3, r8
1a0012f2:	45a0      	cmp	r8, r4
1a0012f4:	d909      	bls.n	1a00130a <__udivmoddi4+0x96>
1a0012f6:	19e4      	adds	r4, r4, r7
1a0012f8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
1a0012fc:	f080 810a 	bcs.w	1a001514 <__udivmoddi4+0x2a0>
1a001300:	45a0      	cmp	r8, r4
1a001302:	f240 8107 	bls.w	1a001514 <__udivmoddi4+0x2a0>
1a001306:	3b02      	subs	r3, #2
1a001308:	443c      	add	r4, r7
1a00130a:	ebc8 0404 	rsb	r4, r8, r4
1a00130e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a001312:	2100      	movs	r1, #0
1a001314:	2d00      	cmp	r5, #0
1a001316:	d062      	beq.n	1a0013de <__udivmoddi4+0x16a>
1a001318:	fa24 f40e 	lsr.w	r4, r4, lr
1a00131c:	2300      	movs	r3, #0
1a00131e:	602c      	str	r4, [r5, #0]
1a001320:	606b      	str	r3, [r5, #4]
1a001322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001326:	428b      	cmp	r3, r1
1a001328:	d907      	bls.n	1a00133a <__udivmoddi4+0xc6>
1a00132a:	2d00      	cmp	r5, #0
1a00132c:	d055      	beq.n	1a0013da <__udivmoddi4+0x166>
1a00132e:	2100      	movs	r1, #0
1a001330:	e885 0041 	stmia.w	r5, {r0, r6}
1a001334:	4608      	mov	r0, r1
1a001336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00133a:	fab3 f183 	clz	r1, r3
1a00133e:	2900      	cmp	r1, #0
1a001340:	f040 8090 	bne.w	1a001464 <__udivmoddi4+0x1f0>
1a001344:	42b3      	cmp	r3, r6
1a001346:	d302      	bcc.n	1a00134e <__udivmoddi4+0xda>
1a001348:	4282      	cmp	r2, r0
1a00134a:	f200 80f8 	bhi.w	1a00153e <__udivmoddi4+0x2ca>
1a00134e:	1a84      	subs	r4, r0, r2
1a001350:	eb66 0603 	sbc.w	r6, r6, r3
1a001354:	2001      	movs	r0, #1
1a001356:	46b4      	mov	ip, r6
1a001358:	2d00      	cmp	r5, #0
1a00135a:	d040      	beq.n	1a0013de <__udivmoddi4+0x16a>
1a00135c:	e885 1010 	stmia.w	r5, {r4, ip}
1a001360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001364:	b912      	cbnz	r2, 1a00136c <__udivmoddi4+0xf8>
1a001366:	2701      	movs	r7, #1
1a001368:	fbb7 f7f2 	udiv	r7, r7, r2
1a00136c:	fab7 fe87 	clz	lr, r7
1a001370:	f1be 0f00 	cmp.w	lr, #0
1a001374:	d135      	bne.n	1a0013e2 <__udivmoddi4+0x16e>
1a001376:	1bf3      	subs	r3, r6, r7
1a001378:	ea4f 4817 	mov.w	r8, r7, lsr #16
1a00137c:	fa1f fc87 	uxth.w	ip, r7
1a001380:	2101      	movs	r1, #1
1a001382:	fbb3 f0f8 	udiv	r0, r3, r8
1a001386:	0c22      	lsrs	r2, r4, #16
1a001388:	fb08 3610 	mls	r6, r8, r0, r3
1a00138c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
1a001390:	fb0c f300 	mul.w	r3, ip, r0
1a001394:	42b3      	cmp	r3, r6
1a001396:	d907      	bls.n	1a0013a8 <__udivmoddi4+0x134>
1a001398:	19f6      	adds	r6, r6, r7
1a00139a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
1a00139e:	d202      	bcs.n	1a0013a6 <__udivmoddi4+0x132>
1a0013a0:	42b3      	cmp	r3, r6
1a0013a2:	f200 80ce 	bhi.w	1a001542 <__udivmoddi4+0x2ce>
1a0013a6:	4610      	mov	r0, r2
1a0013a8:	1af6      	subs	r6, r6, r3
1a0013aa:	b2a2      	uxth	r2, r4
1a0013ac:	fbb6 f3f8 	udiv	r3, r6, r8
1a0013b0:	fb08 6613 	mls	r6, r8, r3, r6
1a0013b4:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
1a0013b8:	fb0c fc03 	mul.w	ip, ip, r3
1a0013bc:	45a4      	cmp	ip, r4
1a0013be:	d907      	bls.n	1a0013d0 <__udivmoddi4+0x15c>
1a0013c0:	19e4      	adds	r4, r4, r7
1a0013c2:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
1a0013c6:	d202      	bcs.n	1a0013ce <__udivmoddi4+0x15a>
1a0013c8:	45a4      	cmp	ip, r4
1a0013ca:	f200 80b5 	bhi.w	1a001538 <__udivmoddi4+0x2c4>
1a0013ce:	4613      	mov	r3, r2
1a0013d0:	ebcc 0404 	rsb	r4, ip, r4
1a0013d4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a0013d8:	e79c      	b.n	1a001314 <__udivmoddi4+0xa0>
1a0013da:	4629      	mov	r1, r5
1a0013dc:	4628      	mov	r0, r5
1a0013de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0013e2:	f1ce 0120 	rsb	r1, lr, #32
1a0013e6:	fa06 f30e 	lsl.w	r3, r6, lr
1a0013ea:	fa07 f70e 	lsl.w	r7, r7, lr
1a0013ee:	fa20 f901 	lsr.w	r9, r0, r1
1a0013f2:	ea4f 4817 	mov.w	r8, r7, lsr #16
1a0013f6:	40ce      	lsrs	r6, r1
1a0013f8:	ea49 0903 	orr.w	r9, r9, r3
1a0013fc:	fbb6 faf8 	udiv	sl, r6, r8
1a001400:	ea4f 4419 	mov.w	r4, r9, lsr #16
1a001404:	fb08 661a 	mls	r6, r8, sl, r6
1a001408:	fa1f fc87 	uxth.w	ip, r7
1a00140c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
1a001410:	fb0a f20c 	mul.w	r2, sl, ip
1a001414:	429a      	cmp	r2, r3
1a001416:	fa00 f40e 	lsl.w	r4, r0, lr
1a00141a:	d90a      	bls.n	1a001432 <__udivmoddi4+0x1be>
1a00141c:	19db      	adds	r3, r3, r7
1a00141e:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
1a001422:	f080 8087 	bcs.w	1a001534 <__udivmoddi4+0x2c0>
1a001426:	429a      	cmp	r2, r3
1a001428:	f240 8084 	bls.w	1a001534 <__udivmoddi4+0x2c0>
1a00142c:	f1aa 0a02 	sub.w	sl, sl, #2
1a001430:	443b      	add	r3, r7
1a001432:	1a9b      	subs	r3, r3, r2
1a001434:	fa1f f989 	uxth.w	r9, r9
1a001438:	fbb3 f1f8 	udiv	r1, r3, r8
1a00143c:	fb08 3311 	mls	r3, r8, r1, r3
1a001440:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
1a001444:	fb01 f60c 	mul.w	r6, r1, ip
1a001448:	429e      	cmp	r6, r3
1a00144a:	d907      	bls.n	1a00145c <__udivmoddi4+0x1e8>
1a00144c:	19db      	adds	r3, r3, r7
1a00144e:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
1a001452:	d26b      	bcs.n	1a00152c <__udivmoddi4+0x2b8>
1a001454:	429e      	cmp	r6, r3
1a001456:	d969      	bls.n	1a00152c <__udivmoddi4+0x2b8>
1a001458:	3902      	subs	r1, #2
1a00145a:	443b      	add	r3, r7
1a00145c:	1b9b      	subs	r3, r3, r6
1a00145e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
1a001462:	e78e      	b.n	1a001382 <__udivmoddi4+0x10e>
1a001464:	f1c1 0e20 	rsb	lr, r1, #32
1a001468:	fa22 f40e 	lsr.w	r4, r2, lr
1a00146c:	408b      	lsls	r3, r1
1a00146e:	4323      	orrs	r3, r4
1a001470:	fa20 f70e 	lsr.w	r7, r0, lr
1a001474:	fa06 f401 	lsl.w	r4, r6, r1
1a001478:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a00147c:	fa26 f60e 	lsr.w	r6, r6, lr
1a001480:	433c      	orrs	r4, r7
1a001482:	fbb6 f9fc 	udiv	r9, r6, ip
1a001486:	0c27      	lsrs	r7, r4, #16
1a001488:	fb0c 6619 	mls	r6, ip, r9, r6
1a00148c:	fa1f f883 	uxth.w	r8, r3
1a001490:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
1a001494:	fb09 f708 	mul.w	r7, r9, r8
1a001498:	42b7      	cmp	r7, r6
1a00149a:	fa02 f201 	lsl.w	r2, r2, r1
1a00149e:	fa00 fa01 	lsl.w	sl, r0, r1
1a0014a2:	d908      	bls.n	1a0014b6 <__udivmoddi4+0x242>
1a0014a4:	18f6      	adds	r6, r6, r3
1a0014a6:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0014aa:	d241      	bcs.n	1a001530 <__udivmoddi4+0x2bc>
1a0014ac:	42b7      	cmp	r7, r6
1a0014ae:	d93f      	bls.n	1a001530 <__udivmoddi4+0x2bc>
1a0014b0:	f1a9 0902 	sub.w	r9, r9, #2
1a0014b4:	441e      	add	r6, r3
1a0014b6:	1bf6      	subs	r6, r6, r7
1a0014b8:	b2a0      	uxth	r0, r4
1a0014ba:	fbb6 f4fc 	udiv	r4, r6, ip
1a0014be:	fb0c 6614 	mls	r6, ip, r4, r6
1a0014c2:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
1a0014c6:	fb04 f808 	mul.w	r8, r4, r8
1a0014ca:	45b8      	cmp	r8, r7
1a0014cc:	d907      	bls.n	1a0014de <__udivmoddi4+0x26a>
1a0014ce:	18ff      	adds	r7, r7, r3
1a0014d0:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
1a0014d4:	d228      	bcs.n	1a001528 <__udivmoddi4+0x2b4>
1a0014d6:	45b8      	cmp	r8, r7
1a0014d8:	d926      	bls.n	1a001528 <__udivmoddi4+0x2b4>
1a0014da:	3c02      	subs	r4, #2
1a0014dc:	441f      	add	r7, r3
1a0014de:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
1a0014e2:	ebc8 0707 	rsb	r7, r8, r7
1a0014e6:	fba0 8902 	umull	r8, r9, r0, r2
1a0014ea:	454f      	cmp	r7, r9
1a0014ec:	4644      	mov	r4, r8
1a0014ee:	464e      	mov	r6, r9
1a0014f0:	d314      	bcc.n	1a00151c <__udivmoddi4+0x2a8>
1a0014f2:	d029      	beq.n	1a001548 <__udivmoddi4+0x2d4>
1a0014f4:	b365      	cbz	r5, 1a001550 <__udivmoddi4+0x2dc>
1a0014f6:	ebba 0304 	subs.w	r3, sl, r4
1a0014fa:	eb67 0706 	sbc.w	r7, r7, r6
1a0014fe:	fa07 fe0e 	lsl.w	lr, r7, lr
1a001502:	40cb      	lsrs	r3, r1
1a001504:	40cf      	lsrs	r7, r1
1a001506:	ea4e 0303 	orr.w	r3, lr, r3
1a00150a:	e885 0088 	stmia.w	r5, {r3, r7}
1a00150e:	2100      	movs	r1, #0
1a001510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001514:	4613      	mov	r3, r2
1a001516:	e6f8      	b.n	1a00130a <__udivmoddi4+0x96>
1a001518:	4610      	mov	r0, r2
1a00151a:	e6e0      	b.n	1a0012de <__udivmoddi4+0x6a>
1a00151c:	ebb8 0402 	subs.w	r4, r8, r2
1a001520:	eb69 0603 	sbc.w	r6, r9, r3
1a001524:	3801      	subs	r0, #1
1a001526:	e7e5      	b.n	1a0014f4 <__udivmoddi4+0x280>
1a001528:	4604      	mov	r4, r0
1a00152a:	e7d8      	b.n	1a0014de <__udivmoddi4+0x26a>
1a00152c:	4611      	mov	r1, r2
1a00152e:	e795      	b.n	1a00145c <__udivmoddi4+0x1e8>
1a001530:	4681      	mov	r9, r0
1a001532:	e7c0      	b.n	1a0014b6 <__udivmoddi4+0x242>
1a001534:	468a      	mov	sl, r1
1a001536:	e77c      	b.n	1a001432 <__udivmoddi4+0x1be>
1a001538:	3b02      	subs	r3, #2
1a00153a:	443c      	add	r4, r7
1a00153c:	e748      	b.n	1a0013d0 <__udivmoddi4+0x15c>
1a00153e:	4608      	mov	r0, r1
1a001540:	e70a      	b.n	1a001358 <__udivmoddi4+0xe4>
1a001542:	3802      	subs	r0, #2
1a001544:	443e      	add	r6, r7
1a001546:	e72f      	b.n	1a0013a8 <__udivmoddi4+0x134>
1a001548:	45c2      	cmp	sl, r8
1a00154a:	d3e7      	bcc.n	1a00151c <__udivmoddi4+0x2a8>
1a00154c:	463e      	mov	r6, r7
1a00154e:	e7d1      	b.n	1a0014f4 <__udivmoddi4+0x280>
1a001550:	4629      	mov	r1, r5
1a001552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001556:	bf00      	nop

1a001558 <__aeabi_idiv0>:
1a001558:	4770      	bx	lr
1a00155a:	bf00      	nop

1a00155c <__libc_init_array>:
1a00155c:	b570      	push	{r4, r5, r6, lr}
1a00155e:	4b0e      	ldr	r3, [pc, #56]	; (1a001598 <__libc_init_array+0x3c>)
1a001560:	4c0e      	ldr	r4, [pc, #56]	; (1a00159c <__libc_init_array+0x40>)
1a001562:	1ae4      	subs	r4, r4, r3
1a001564:	10a4      	asrs	r4, r4, #2
1a001566:	2500      	movs	r5, #0
1a001568:	461e      	mov	r6, r3
1a00156a:	42a5      	cmp	r5, r4
1a00156c:	d004      	beq.n	1a001578 <__libc_init_array+0x1c>
1a00156e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a001572:	4798      	blx	r3
1a001574:	3501      	adds	r5, #1
1a001576:	e7f8      	b.n	1a00156a <__libc_init_array+0xe>
1a001578:	f7fe fff4 	bl	1a000564 <_init>
1a00157c:	4c08      	ldr	r4, [pc, #32]	; (1a0015a0 <__libc_init_array+0x44>)
1a00157e:	4b09      	ldr	r3, [pc, #36]	; (1a0015a4 <__libc_init_array+0x48>)
1a001580:	1ae4      	subs	r4, r4, r3
1a001582:	10a4      	asrs	r4, r4, #2
1a001584:	2500      	movs	r5, #0
1a001586:	461e      	mov	r6, r3
1a001588:	42a5      	cmp	r5, r4
1a00158a:	d004      	beq.n	1a001596 <__libc_init_array+0x3a>
1a00158c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a001590:	4798      	blx	r3
1a001592:	3501      	adds	r5, #1
1a001594:	e7f8      	b.n	1a001588 <__libc_init_array+0x2c>
1a001596:	bd70      	pop	{r4, r5, r6, pc}
1a001598:	1a001730 	.word	0x1a001730
1a00159c:	1a001730 	.word	0x1a001730
1a0015a0:	1a001734 	.word	0x1a001734
1a0015a4:	1a001730 	.word	0x1a001730

1a0015a8 <memset>:
1a0015a8:	4402      	add	r2, r0
1a0015aa:	4603      	mov	r3, r0
1a0015ac:	4293      	cmp	r3, r2
1a0015ae:	d002      	beq.n	1a0015b6 <memset+0xe>
1a0015b0:	f803 1b01 	strb.w	r1, [r3], #1
1a0015b4:	e7fa      	b.n	1a0015ac <memset+0x4>
1a0015b6:	4770      	bx	lr

1a0015b8 <GpioPorts>:
1a0015b8:	0003 0303 0403 0f05 1005 0503 0603 0703     ................
1a0015c8:	0802 ffff                                   ....

1a0015cc <OscRateIn>:
1a0015cc:	1b00 00b7                                   ....

1a0015d0 <ExtRateIn>:
1a0015d0:	0000 0000                                   ....

1a0015d4 <GpioButtons>:
1a0015d4:	0400 0800 0900 0901                         ........

1a0015dc <GpioLeds>:
1a0015dc:	0005 0105 0205 0e00 0b01 0c01               ............

1a0015e8 <InitClkStates>:
1a0015e8:	0f01 0101                                   ....

1a0015ec <pinmuxing>:
1a0015ec:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a0015fc:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a00160c:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a00161c:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a00162c:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a00163c:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a00164c:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a00165c:	0206 0057 0201 0804 0f03 0f0f 00ff 0000     ..W.............

1a00166c <periph_to_base>:
1a00166c:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a00167c:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a00168c:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a00169c:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a0016ac:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a0016bc:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a0016cc:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a0016d8 <InitClkStates>:
1a0016d8:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a0016e8:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a0016f8:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a001708:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a001718:	111a 0001 111b 0001                         ........

1a001720 <UART_BClock>:
1a001720:	01c2 01a2 0182 0162                         ......b.

1a001728 <UART_PClock>:
1a001728:	0081 0082 00a1 00a2                         ........
